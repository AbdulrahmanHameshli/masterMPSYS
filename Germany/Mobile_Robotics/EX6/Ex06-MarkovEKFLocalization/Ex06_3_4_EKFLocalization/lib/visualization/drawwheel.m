%DRAWWHEEL Draw wheel.%   DRAWWHEEL(X,COLOR) draws a wheel at pose X = [x y phi] with%   reference frame to be defined so as the horizontal wheel axis%   is the x-axis. The wheel has default size and type. COLOR is%   a [r g b]-vector or a color string such as 'r' or 'g'.%%   DRAWWHEEL(X,TYPE,PARAMS,COLOR) draws a wheel of type TYPE at%   pose X with parameters given in PARAMS. Six wheel types are%   implemented:%      TYPE = 0 draws a fixed standard wheel%      TYPE = 1 draws a steered/orientable standard wheel%      TYPE = 2 draws a passive caster wheel%      TYPE = 3 draws a motorized caster wheel%      TYPE = 4 draws a swedish wheel%      TYPE = 5 draws a ball wheel%   PARAMS is a nx1 vector, depending on the wheel type: all wheels%   have radius r and thickness w, caster wheels are given by r, w%   and displacement d, swedish wheels by r, w and roller angle%   gamma. Definitions are due to Campion, Bastin, D'Andrea-Novel,%   IEEE TRA, 1996, except for the pose which we give in Cartesian%   rather than polar coordinates.%%   H = DRAWWHEEL(...) returns a column vector of handles to all%   graphic objects of the wheel drawing. Remember that not all%   graphic properties apply to all types of graphic objects. Use%   FINDOBJ to find and access the individual objects.%%   See also DRAWROBOT, DRAWRECT, DRAWARROW, FINDOBJ.% v.1.0, 12.2023, Kai Arras, Uni Stuttgart: creation% v.1.1, 09.2024, Kai Arras, Uni Stuttgart: drawrect replaces drawroundedrect function h = drawwheel(varargin)% ConstantsDEFT = 0;            % default wheel typeDEFR = 0.1;          % default wheel radius in [m]DEFW = 0.04;         % default wheel thickness in [m]RR   = DEFW/2;       % default wheel roundness radius in [m]% Shapes and relative poses for swedish wheel componentsSWSCALE = 0.08;SWRECT = SWSCALE*[-0.8 0.8 0.8 -0.8; -0.40 -0.40 0.40 0.40];SWROLL = SWSCALE*[0 0.1 0.5 0.9 1 1 0.9 0.5 0.1 0 0;  0.08 0.03 0 0.03 0.08 0.28 0.33 0.36 0.33 0.28 0.08];proll = SWROLL - mean(SWROLL(:,1:end-1),2);  % remove countour-closing duplicate pointnproll = size(proll,2);RPOSES = [  -0.84*SWSCALE  0  pi/2       0.86   0.84*SWSCALE  0  pi/2       0.86  -0.72*SWSCALE  0  72*pi/180  0.87   0.72*SWSCALE  0  72*pi/180  0.87  -0.42*SWSCALE  0  58*pi/180  0.9   0.42*SWSCALE  0  58*pi/180  0.9   0*SWSCALE     0  50*pi/180  1  ];SWFILL = 0;          % fill style of swedish wheels, 1 for grey gradient% Input argument checkinputerr = 0;switch nargin  case 2    pose  = varargin{1};    type  = DEFT;    color = varargin{2};    r     = DEFR;    w     = DEFW;  case 4    pose   = varargin{1};    type   = varargin{2};    params = varargin{3};    color  = varargin{4};    r = params(1);    w = params(2);    if length(params) > 2      d = params(3);    end  otherwise    inputerr = 1;end% Main switch statementif ~inputerr  switch type    case 0      % Draw fixed standard wheel      pose(3) = pose(3) + pi/2;      h = drawrect(pose,2*r,w,RR,1,color);    case 1      % Draw steered/orientable standard wheel      pose(3) = pose(3) + pi/2;      h1 = drawrect(pose,2*r,w,RR,1,color);      rmotor = min([0.04, w-0.02]);      h2 = drawrect(pose,rmotor,rmotor,rmotor/2,1,'w');      h = cat(1,h1,h2);    case 2      % Draw passive caster wheel      % Transform and plot lever rectangle      relpose = [0 d/2 pi/2];      lvpose = compound(pose,relpose);      width = 0.6*w;      hl = drawrect(lvpose,d+width,width,width/2,1,brightencolor(color));      % Transform and plot wheel      relpose = [0 d pi/2];      whpose = compound(pose,relpose);      hw = drawrect(whpose,2*r,w,RR,1,color);      h = cat(1,hl,hw);    case 3      % Draw motorized caster wheel      % Transform and plot lever rectangle      relpose = [0 d/2 pi/2];      lvpose = compound(pose,relpose);      width = 0.6*w;      hl = drawrect(lvpose,d+width,width,width/2,1,brightencolor(color));      % Transform and plot wheel      relpose = [0 d pi/2];      whpose = compound(pose,relpose);      hw = drawrect(whpose,2*r,w,RR,1,color);      % Transform and plot motor (if any)      rmotor = min([0.04, width-0.01]);      hm = drawrect(pose,rmotor,rmotor,rmotor/2,1,'w');      h = cat(1,hl,hw,hm);    case 4      % Draw swedish wheel      pose(3) = pose(3) + pi/2;  % Adjust to wheel coordinate frame definition      % Transform and plot background rrectanlge      R = [cos(pose(3)), -sin(pose(3));           sin(pose(3)),  cos(pose(3))];      p = R*SWRECT + [pose(1); pose(2)]*ones(1,size(SWRECT,2));      hr = fill(p(1,:),p(2,:),color,'EdgeColor','none');            % Transform and plot rollers      h = hr;      for i = 1:size(RPOSES,1)        rollpose = compound(pose,RPOSES(i,1:3));        T = [rollpose(1); rollpose(2)];        R = [cos(rollpose(3)), -sin(rollpose(3));             sin(rollpose(3)),  cos(rollpose(3))];        p = R*diag([RPOSES(i,4) 1])*proll + T*ones(1,nproll);        if SWFILL          cmap = gray(64);          colormap(cmap(5:40,:));   % beware: could have side effects on figure's colormap setting          hr = fill(p(1,:),p(2,:),[3 2 1 2 3 10 11 12 11 10 3],'edgecolor','flat');  % gradient for 1:nproll as 3rd argument        else          hr = fill(p(1,:),p(2,:),'w','EdgeColor',color);        end        h = cat(1,h,hr);      end    case 5      % Draw ball wheel      h = drawrect(pose,2*r,2*r,r,1,color);    otherwise      disp('drawwheel: Unsupported wheel type'); h = [];  endelse  disp('drawwheel: Wrong number of input arguments'); h = [];endfunction newcol = brightencolor(col)% Transform color string to rgb vectorif ischar(col)  col = bitget(find('krgybmcw'==col)-1,1:3);  end% Make color brighternewcol = col + 0.6*(1-col);