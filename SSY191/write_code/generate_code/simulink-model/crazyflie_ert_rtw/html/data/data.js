var dataJson = {"arch":{"ispc":false,"isunix":true,"ismac":false},"build":"crazyflie","ref":false,"files":[{"name":"crazyflie.c","type":"source","group":"model","path":"/home/bober2/Desktop/school/SSY191/project2024-group22/generate_code/simulink-model/crazyflie_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * File: crazyflie.c\n *\n * Code generated for Simulink model 'crazyflie'.\n *\n * Model version                  : 5.12\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\n * C/C++ source code generated on : Fri Apr  5 15:02:15 2024\n *\n * Target selection: ert.tlc\n * Embedded hardware selection: ARM Compatible->ARM Cortex\n * Code generation objectives:\n *    1. Execution efficiency\n *    2. RAM efficiency\n * Validation result: Not run\n */\n\n#include \"crazyflie.h\"\n\n/* Block signals and states (default storage) */\nDW_crazyflie_T crazyflie_DW;\n\n/* External inputs (root inport signals with default storage) */\nExtU_crazyflie_T crazyflie_U;\n\n/* External outputs (root outports fed by signals with default storage) */\nExtY_crazyflie_T crazyflie_Y;\n\n/* Model step function */\nvoid crazyflie_step(void)\n{\n  real_T rtb_Sum1_idx_0;\n  real_T rtb_Sum1_idx_1;\n  real_T rtb_Sum5;\n  real_T rtb_Sum6;\n  real_T rtb_Sum7;\n  real_T rtb_Sum_k;\n  real_T tmp;\n\n  /* Sum: '<S2>/Sum1' incorporates:\n   *  Delay: '<S2>/Delay'\n   *  Gain: '<S2>/Gain'\n   *  Gain: '<S2>/Gain1'\n   *  Gain: '<S2>/Gain2'\n   *  Gain: '<S3>/Gain'\n   *  Gain: '<S3>/Gain1'\n   *  Inport: '<Root>/Acc_x'\n   *  Inport: '<Root>/Acc_y'\n   *  Inport: '<Root>/Acc_z'\n   *  Inport: '<Root>/Gyro_x'\n   *  Inport: '<Root>/Gyro_y'\n   *  MATLAB Function: '<S3>/MATLAB Function'\n   *  MATLAB Function: '<S3>/MATLAB Function1'\n   *  Sum: '<S2>/Sum'\n   */\n  /* MATLAB Function 'Subsystem1/Subsystem/MATLAB Function': '<S4>:1' */\n  /* '<S4>:1:3' phi= atan2(Fy_B,Fz_b); */\n  /*  fx or -fx ???? */\n  /* MATLAB Function 'Subsystem1/Subsystem/MATLAB Function1': '<S5>:1' */\n  /* '<S5>:1:3' theta = atan2(-Fx_B,sqrt((Fy_B)^2+(Fz_B)^2)); */\n  rtb_Sum1_idx_0 = (0.1 * crazyflie_U.Gyro_x + crazyflie_DW.Delay_DSTATE[0]) *\n    0.8 + 57.295779513082323 * atan2(crazyflie_U.Acc_y, crazyflie_U.Acc_z) * 0.2;\n  rtb_Sum1_idx_1 = atan2(-crazyflie_U.Acc_x, sqrt(crazyflie_U.Acc_y *\n    crazyflie_U.Acc_y + crazyflie_U.Acc_z * crazyflie_U.Acc_z)) *\n    57.295779513082323 * 0.2 + (0.1 * crazyflie_U.Gyro_y +\n    crazyflie_DW.Delay_DSTATE[1]) * 0.8;\n\n  /* Sum: '<Root>/Sum' incorporates:\n   *  Inport: '<Root>/Ref_Roll'\n   */\n  rtb_Sum_k = crazyflie_U.Ref_Roll - rtb_Sum1_idx_0;\n\n  /* Sum: '<Root>/Sum1' incorporates:\n   *  DiscreteIntegrator: '<Root>/Discrete-Time Integrator'\n   *  Gain: '<Root>/Gain'\n   */\n  rtb_Sum5 = 1000.0 * rtb_Sum_k + crazyflie_DW.DiscreteTimeIntegrator_DSTATE;\n\n  /* Sum: '<S1>/Sum6' incorporates:\n   *  Inport: '<Root>/Ref_Pitch'\n   */\n  rtb_Sum6 = crazyflie_U.Ref_Pitch - rtb_Sum1_idx_1;\n\n  /* Sum: '<S1>/Sum7' incorporates:\n   *  DiscreteIntegrator: '<S1>/Discrete-Time Integrator1'\n   *  Gain: '<S1>/Gain6'\n   */\n  rtb_Sum7 = 1000.0 * rtb_Sum6 + crazyflie_DW.DiscreteTimeIntegrator1_DSTATE;\n\n  /* DataTypeConversion: '<Root>/ToUint16' incorporates:\n   *  Gain: '<Root>/Gain3'\n   *  Gain: '<Root>/Gain5'\n   *  Sum: '<Root>/Sum2'\n   */\n  tmp = -rtb_Sum5 + -rtb_Sum7;\n  if (tmp < 65536.0) {\n    if (tmp >= 0.0) {\n      /* Outport: '<Root>/Motor_1' */\n      crazyflie_Y.Motor_1 = (uint16_T)tmp;\n    } else {\n      /* Outport: '<Root>/Motor_1' */\n      crazyflie_Y.Motor_1 = 0U;\n    }\n  } else {\n    /* Outport: '<Root>/Motor_1' */\n    crazyflie_Y.Motor_1 = MAX_uint16_T;\n  }\n\n  /* End of DataTypeConversion: '<Root>/ToUint16' */\n\n  /* DataTypeConversion: '<Root>/ToUint16_1' incorporates:\n   *  Gain: '<Root>/Gain1'\n   *  Sum: '<Root>/Sum3'\n   */\n  tmp = -rtb_Sum5 + rtb_Sum7;\n  if (tmp < 65536.0) {\n    if (tmp >= 0.0) {\n      /* Outport: '<Root>/Motor_2' */\n      crazyflie_Y.Motor_2 = (uint16_T)tmp;\n    } else {\n      /* Outport: '<Root>/Motor_2' */\n      crazyflie_Y.Motor_2 = 0U;\n    }\n  } else {\n    /* Outport: '<Root>/Motor_2' */\n    crazyflie_Y.Motor_2 = MAX_uint16_T;\n  }\n\n  /* End of DataTypeConversion: '<Root>/ToUint16_1' */\n\n  /* DataTypeConversion: '<Root>/ToUint16_2' incorporates:\n   *  Sum: '<Root>/Sum4'\n   */\n  tmp = rtb_Sum5 + rtb_Sum7;\n  if (tmp < 65536.0) {\n    if (tmp >= 0.0) {\n      /* Outport: '<Root>/Motor_3' */\n      crazyflie_Y.Motor_3 = (uint16_T)tmp;\n    } else {\n      /* Outport: '<Root>/Motor_3' */\n      crazyflie_Y.Motor_3 = 0U;\n    }\n  } else {\n    /* Outport: '<Root>/Motor_3' */\n    crazyflie_Y.Motor_3 = MAX_uint16_T;\n  }\n\n  /* End of DataTypeConversion: '<Root>/ToUint16_2' */\n\n  /* DataTypeConversion: '<Root>/ToUint16_3' incorporates:\n   *  Gain: '<Root>/Gain6'\n   *  Sum: '<Root>/Sum5'\n   */\n  tmp = rtb_Sum5 + -rtb_Sum7;\n  if (tmp < 65536.0) {\n    if (tmp >= 0.0) {\n      /* Outport: '<Root>/Motor_4' */\n      crazyflie_Y.Motor_4 = (uint16_T)tmp;\n    } else {\n      /* Outport: '<Root>/Motor_4' */\n      crazyflie_Y.Motor_4 = 0U;\n    }\n  } else {\n    /* Outport: '<Root>/Motor_4' */\n    crazyflie_Y.Motor_4 = MAX_uint16_T;\n  }\n\n  /* End of DataTypeConversion: '<Root>/ToUint16_3' */\n\n  /* Update for Delay: '<S2>/Delay' */\n  crazyflie_DW.Delay_DSTATE[0] = rtb_Sum1_idx_0;\n  crazyflie_DW.Delay_DSTATE[1] = rtb_Sum1_idx_1;\n\n  /* Update for DiscreteIntegrator: '<Root>/Discrete-Time Integrator' */\n  crazyflie_DW.DiscreteTimeIntegrator_DSTATE += 0.001 * rtb_Sum_k;\n\n  /* Update for DiscreteIntegrator: '<S1>/Discrete-Time Integrator1' */\n  crazyflie_DW.DiscreteTimeIntegrator1_DSTATE += 0.001 * rtb_Sum6;\n}\n\n/* Model initialize function */\nvoid crazyflie_initialize(void)\n{\n  /* (no initialization code required) */\n}\n\n/* Model terminate function */\nvoid crazyflie_terminate(void)\n{\n  /* (no terminate code required) */\n}\n\n/*\n * File trailer for generated code.\n *\n * [EOF]\n */\n"},{"name":"crazyflie.h","type":"header","group":"model","path":"/home/bober2/Desktop/school/SSY191/project2024-group22/generate_code/simulink-model/crazyflie_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * File: crazyflie.h\n *\n * Code generated for Simulink model 'crazyflie'.\n *\n * Model version                  : 5.12\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\n * C/C++ source code generated on : Fri Apr  5 15:02:15 2024\n *\n * Target selection: ert.tlc\n * Embedded hardware selection: ARM Compatible->ARM Cortex\n * Code generation objectives:\n *    1. Execution efficiency\n *    2. RAM efficiency\n * Validation result: Not run\n */\n\n#ifndef RTW_HEADER_crazyflie_h_\n#define RTW_HEADER_crazyflie_h_\n#include <math.h>\n#ifndef crazyflie_COMMON_INCLUDES_\n#define crazyflie_COMMON_INCLUDES_\n#include \"rtwtypes.h\"\n#endif                                 /* crazyflie_COMMON_INCLUDES_ */\n\n/* Model Code Variants */\n\n/* Macros for accessing real-time model data structure */\n\n/* Block signals and states (default storage) for system '<Root>' */\ntypedef struct {\n  real_T Delay_DSTATE[2];              /* '<S2>/Delay' */\n  real_T DiscreteTimeIntegrator_DSTATE;/* '<Root>/Discrete-Time Integrator' */\n  real_T DiscreteTimeIntegrator1_DSTATE;/* '<S1>/Discrete-Time Integrator1' */\n} DW_crazyflie_T;\n\n/* External inputs (root inport signals with default storage) */\ntypedef struct {\n  real_T Base_Thrust;                  /* '<Root>/Base_Thrust' */\n  real_T Ref_Roll;                     /* '<Root>/Ref_Roll' */\n  real_T Ref_Pitch;                    /* '<Root>/Ref_Pitch' */\n  real_T Ref_YawRate;                  /* '<Root>/Ref_YawRate' */\n  real_T Acc_x;                        /* '<Root>/Acc_x' */\n  real_T Acc_y;                        /* '<Root>/Acc_y' */\n  real_T Acc_z;                        /* '<Root>/Acc_z' */\n  real_T Gyro_x;                       /* '<Root>/Gyro_x' */\n  real_T Gyro_y;                       /* '<Root>/Gyro_y' */\n  real_T Gyro_z;                       /* '<Root>/Gyro_z' */\n  int16_T Flow_x;                      /* '<Root>/Flow_x' */\n  int16_T Flow_y;                      /* '<Root>/Flow_y' */\n} ExtU_crazyflie_T;\n\n/* External outputs (root outports fed by signals with default storage) */\ntypedef struct {\n  uint16_T Motor_1;                    /* '<Root>/Motor_1' */\n  uint16_T Motor_2;                    /* '<Root>/Motor_2' */\n  uint16_T Motor_3;                    /* '<Root>/Motor_3' */\n  uint16_T Motor_4;                    /* '<Root>/Motor_4' */\n  real_T Log1;                         /* '<Root>/Log1' */\n  real_T Log2;                         /* '<Root>/Log2' */\n  real_T Log3;                         /* '<Root>/Log3' */\n  real_T Log4;                         /* '<Root>/Log4' */\n  real_T Log5;                         /* '<Root>/Log5' */\n  real_T Log6;                         /* '<Root>/Log6' */\n} ExtY_crazyflie_T;\n\n/* Block signals and states (default storage) */\nextern DW_crazyflie_T crazyflie_DW;\n\n/* External inputs (root inport signals with default storage) */\nextern ExtU_crazyflie_T crazyflie_U;\n\n/* External outputs (root outports fed by signals with default storage) */\nextern ExtY_crazyflie_T crazyflie_Y;\n\n/* Model entry point functions */\nextern void crazyflie_initialize(void);\nextern void crazyflie_step(void);\nextern void crazyflie_terminate(void);\n\n/*-\n * These blocks were eliminated from the model due to optimizations:\n *\n * Block '<S2>/Discrete-Time Integrator' : Unused code path elimination\n * Block '<S2>/Scope' : Unused code path elimination\n * Block '<S2>/Scope1' : Unused code path elimination\n * Block '<S2>/Scope2' : Unused code path elimination\n * Block '<S3>/Scope' : Unused code path elimination\n * Block '<Root>/Gain2' : Eliminated nontunable gain of 1\n * Block '<Root>/Gain4' : Eliminated nontunable gain of 1\n * Block '<Root>/Gain7' : Eliminated nontunable gain of 1\n * Block '<Root>/Gain8' : Eliminated nontunable gain of 1\n * Block '<Root>/log_Acc_x' : Eliminate redundant data type conversion\n * Block '<Root>/log_Acc_y' : Eliminate redundant data type conversion\n * Block '<Root>/log_Acc_z' : Eliminate redundant data type conversion\n * Block '<Root>/log_Gyro_x' : Eliminate redundant data type conversion\n * Block '<Root>/log_Gyro_y' : Eliminate redundant data type conversion\n * Block '<Root>/log_Gyro_z' : Eliminate redundant data type conversion\n */\n\n/*-\n * The generated code includes comments that allow you to trace directly\n * back to the appropriate location in the model.  The basic format\n * is <system>/block_name, where system is the system number (uniquely\n * assigned by Simulink) and block_name is the name of the block.\n *\n * Use the MATLAB hilite_system command to trace the generated code back\n * to the model.  For example,\n *\n * hilite_system('<S3>')    - opens system 3\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\n *\n * Here is the system hierarchy for this model\n *\n * '<Root>' : 'crazyflie'\n * '<S1>'   : 'crazyflie/Subsystem'\n * '<S2>'   : 'crazyflie/Subsystem1'\n * '<S3>'   : 'crazyflie/Subsystem1/Subsystem'\n * '<S4>'   : 'crazyflie/Subsystem1/Subsystem/MATLAB Function'\n * '<S5>'   : 'crazyflie/Subsystem1/Subsystem/MATLAB Function1'\n */\n#endif                                 /* RTW_HEADER_crazyflie_h_ */\n\n/*\n * File trailer for generated code.\n *\n * [EOF]\n */\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"/home/bober2/Desktop/school/SSY191/project2024-group22/generate_code/simulink-model/crazyflie_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * File: rtwtypes.h\n *\n * Code generated for Simulink model 'crazyflie'.\n *\n * Model version                  : 5.12\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\n * C/C++ source code generated on : Fri Apr  5 15:02:15 2024\n *\n * Target selection: ert.tlc\n * Embedded hardware selection: ARM Compatible->ARM Cortex\n * Code generation objectives:\n *    1. Execution efficiency\n *    2. RAM efficiency\n * Validation result: Not run\n */\n\n#ifndef RTWTYPES_H\n#define RTWTYPES_H\n\n/* Logical type definitions */\n#if (!defined(__cplusplus))\n#ifndef false\n#define false                          (0U)\n#endif\n\n#ifndef true\n#define true                           (1U)\n#endif\n#endif\n\n/*=======================================================================*\n * Target hardware information\n *   Device type: ARM Compatible->ARM Cortex\n *   Number of bits:     char:   8    short:   16    int:  32\n *                       long:  32\n *                       native word size:  32\n *   Byte ordering: LittleEndian\n *   Signed integer division rounds to: Zero\n *   Shift right on a signed integer as arithmetic shift: on\n *=======================================================================*/\n\n/*=======================================================================*\n * Fixed width word size data types:                                     *\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\n *=======================================================================*/\ntypedef signed char int8_T;\ntypedef unsigned char uint8_T;\ntypedef short int16_T;\ntypedef unsigned short uint16_T;\ntypedef int int32_T;\ntypedef unsigned int uint32_T;\ntypedef float real32_T;\ntypedef double real64_T;\n\n/*===========================================================================*\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\n *                           real_T, time_T, ulong_T.                        *\n *===========================================================================*/\ntypedef double real_T;\ntypedef double time_T;\ntypedef unsigned char boolean_T;\ntypedef int int_T;\ntypedef unsigned int uint_T;\ntypedef unsigned long ulong_T;\ntypedef char char_T;\ntypedef unsigned char uchar_T;\ntypedef char_T byte_T;\n\n/*=======================================================================*\n * Min and Max:                                                          *\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\n *=======================================================================*/\n#define MAX_int8_T                     ((int8_T)(127))\n#define MIN_int8_T                     ((int8_T)(-128))\n#define MAX_uint8_T                    ((uint8_T)(255U))\n#define MAX_int16_T                    ((int16_T)(32767))\n#define MIN_int16_T                    ((int16_T)(-32768))\n#define MAX_uint16_T                   ((uint16_T)(65535U))\n#define MAX_int32_T                    ((int32_T)(2147483647))\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\n\n/* Block D-Work pointer type */\ntypedef void * pointer_T;\n\n#endif                                 /* RTWTYPES_H */\n\n/*\n * File trailer for generated code.\n *\n * [EOF]\n */\n"},{"name":"rtmodel.h","type":"header","group":"interface","path":"/home/bober2/Desktop/school/SSY191/project2024-group22/generate_code/simulink-model/crazyflie_ert_rtw","tag":"","groupDisplay":"Interface files","code":"/*\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * File: rtmodel.h\n *\n * Code generated for Simulink model 'crazyflie'.\n *\n * Model version                  : 5.12\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\n * C/C++ source code generated on : Fri Apr  5 15:02:15 2024\n *\n * Target selection: ert.tlc\n * Embedded hardware selection: ARM Compatible->ARM Cortex\n * Code generation objectives:\n *    1. Execution efficiency\n *    2. RAM efficiency\n * Validation result: Not run\n */\n\n#ifndef RTW_HEADER_rtmodel_h_\n#define RTW_HEADER_rtmodel_h_\n#include \"crazyflie.h\"\n\n/* Macros generated for backwards compatibility  */\n#ifndef rtmGetErrorStatus\n#define rtmGetErrorStatus(rtm)         ((void*) 0)\n#endif\n\n#ifndef rtmSetErrorStatus\n#define rtmSetErrorStatus(rtm, val)    ((void) 0)\n#endif\n\n#ifndef rtmGetStopRequested\n#define rtmGetStopRequested(rtm)       ((void*) 0)\n#endif\n#endif                                 /* RTW_HEADER_rtmodel_h_ */\n\n/*\n * File trailer for generated code.\n *\n * [EOF]\n */\n"},{"name":"crazyflieModel.c","type":"source","group":"","path":"/home/bober2/Desktop/school/SSY191/project2024-group22/generate_code/simulink-model/crazyflie_ert_rtw","tag":"","groupDisplay":"Other files","code":"/*\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * File: crazyflieModel.c\n *\n * Code generated for Simulink model 'crazyflie'.\n *\n * Model version                  : 5.12\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\n * C/C++ source code generated on : Fri Apr  5 15:02:15 2024\n *\n * Target selection: ert.tlc\n * Embedded hardware selection: ARM Compatible->ARM Cortex\n * Code generation objectives:\n *    1. Execution efficiency\n *    2. RAM efficiency\n * Validation result: Not run\n */\n\n#define DEBUG_MODULE                   \"STAB\"\n#include <math.h>\n#include \"FreeRTOS.h\"\n#include \"task.h\"\n#include \"system.h\"\n#include \"log.h\"\n#include \"param.h\"\n#include \"debug.h\"\n#include \"motors.h\"\n#include \"pm.h\"\n#include \"crazyflie.h\"\n#include \"crazyflieModel.h\"\n#include \"sensors.h\"\n#include \"commander.h\"\n#include \"crtp_commander_high_level.h\"\n#include \"crtp_localization_service.h\"\n#include \"controller.h\"\n#include \"power_distribution.h\"\n#include \"collision_avoidance.h\"\n#include \"health.h\"\n#include \"supervisor.h\"\n#include \"estimator.h\"\n#include \"usddeck.h\"\n#include \"quatcompress.h\"\n#include \"statsCnt.h\"\n#include \"static_mem.h\"\n#include \"rateSupervisor.h\"\n\nstatic bool isInit;\nstatic bool emergencyStop = false;\nstatic int emergencyStopTimeout = EMERGENCY_STOP_TIMEOUT_DISABLED;\nstatic uint32_t inToOutLatency;\n\n// State variables for the stabilizer\nstatic setpoint_t setpoint;\nstatic sensorData_t sensorData;\nstatic state_t state;\nstatic control_t control;\n\n// For scratch storage - never logged or passed to other subsystems.\n//static setpoint_t tempSetpoint;\nstatic StateEstimatorType estimatorType;\nstatic ControllerType controllerType;\nstatic STATS_CNT_RATE_DEFINE(stabilizerRate, 500);\nstatic rateSupervisor_t rateSupervisorContext;\nstatic bool rateWarningDisplayed = false;\n\n// SSY191\nstatic float l1, l2, l3, l4, l5, l6;\nstatic uint16_t m1, m2, m3, m4;\nSTATIC_MEM_TASK_ALLOC(crazyflieModelTask, CRAZYFLIEMODEL_TASK_STACKSIZE);\nstatic void crazyflieModelTask(void* param);\nstatic void calcSensorToOutputLatency(const sensorData_t *sensorData)\n{\n  uint64_t outTimestamp = usecTimestamp();\n  inToOutLatency = outTimestamp - sensorData->interruptTimestamp;\n}\n\nvoid crazyflieModelInit(StateEstimatorType estimator)\n{\n  if (isInit)\n    return;\n  crazyflie_initialize();\n  sensorsInit();\n  stateEstimatorInit(estimator);\n  controllerInit(ControllerTypeAny);\n  powerDistributionInit();\n  collisionAvoidanceInit();\n  estimatorType = getStateEstimator();\n  controllerType = getControllerType();\n  crazyflie_initialize();\n  STATIC_MEM_TASK_CREATE(crazyflieModelTask, crazyflieModelTask,\n    CRAZYFLIEMODEL_TASK_NAME, NULL, CRAZYFLIEMODEL_TASK_PRI);\n  isInit = true;\n}\n\nbool crazyflieModelTest(void)\n{\n  bool pass = true;\n  pass &= sensorsTest();\n  pass &= stateEstimatorTest();\n  pass &= controllerTest();\n  pass &= powerDistributionTest();\n  pass &= collisionAvoidanceTest();\n  return pass;\n}\n\nstatic void checkEmergencyStopTimeout()\n{\n  if (emergencyStopTimeout >= 0) {\n    emergencyStopTimeout -= 1;\n    if (emergencyStopTimeout == 0) {\n      emergencyStop = true;\n    }\n  }\n}\n\n/* The stabilizer loop runs at 1kHz (stock) or 500Hz (kalman). It is the\n * responsibility of the different functions to run slower by skipping call\n * (ie. returning without modifying the output structure).\n */\nstatic void crazyflieModelTask(void* param)\n{\n  uint32_t tick;\n  uint32_t lastWakeTime;\n  vTaskSetApplicationTaskTag(0, (void*)TASK_STABILIZER_ID_NBR);\n\n  //Wait for the system to be fully started to start stabilization loop\n  systemWaitStart();\n  DEBUG_PRINT(\"Wait for sensor calibration...\\n\");\n\n  // Wait for sensors to be calibrated\n  lastWakeTime = xTaskGetTickCount();\n  while (!sensorsAreCalibrated()) {\n    vTaskDelayUntil(&lastWakeTime, F2T(RATE_MAIN_LOOP));\n  }\n\n  // Initialize tick to something else then 0\n  tick = 1;\n  rateSupervisorInit(&rateSupervisorContext, xTaskGetTickCount(), M2T(1000), 997,\n                     1003, 1);\n  DEBUG_PRINT(\"Ready to fly.\\n\");\n  while (1) {\n    // The sensor should unlock at 1kHz\n    sensorsWaitDataReady();\n\n    // update sensorData struct (for logging variables)\n    sensorsAcquire(&sensorData, tick);\n    if (healthShallWeRunTest()) {\n      healthRunTests(&sensorData);\n    } else {\n      stateEstimator(&state, tick);\n      commanderGetSetpoint(&setpoint, &state);\n      crazyflie_U.Acc_x = sensorData.acc.x;\n      crazyflie_U.Acc_y = sensorData.acc.y;\n      crazyflie_U.Acc_z = sensorData.acc.z;\n      crazyflie_U.Gyro_x = sensorData.gyro.x;\n      crazyflie_U.Gyro_y = sensorData.gyro.y;\n      crazyflie_U.Gyro_z = sensorData.gyro.z;\n      crazyflie_U.Base_Thrust = setpoint.thrust;\n      crazyflie_U.Ref_Roll = setpoint.attitude.roll;\n      crazyflie_U.Ref_Pitch = setpoint.attitude.pitch;\n      crazyflie_U.Ref_YawRate = setpoint.attitudeRate.yaw;\n\n      //DEBUG_PRINT(\"Acc Y: %f\\n\", sensorData.acc.y);\n      crazyflie_step();\n\n      /* Get model outputs here */\n      l1 = crazyflie_Y.Log1;\n      l2 = crazyflie_Y.Log2;\n      l3 = crazyflie_Y.Log3;\n      l4 = crazyflie_Y.Log4;\n      l5 = crazyflie_Y.Log5;\n      l6 = crazyflie_Y.Log6;\n      m1 = (uint16_t)crazyflie_Y.Motor_1;\n      m2 = (uint16_t)crazyflie_Y.Motor_2;\n      m3 = (uint16_t)crazyflie_Y.Motor_3;\n      m4 = (uint16_t)crazyflie_Y.Motor_4;\n      checkEmergencyStopTimeout();\n\n      //\n      // The supervisor module keeps track of Crazyflie state such as if\n      // we are ok to fly, or if the Crazyflie is in flight.\n      //\n      supervisorUpdate(&sensorData);\n      if (emergencyStop || (systemIsArmed() == false)) {\n        powerStop();\n      } else {\n        motorsSetRatio(MOTOR_M1, m1);\n        motorsSetRatio(MOTOR_M2, m2);\n        motorsSetRatio(MOTOR_M3, m3);\n        motorsSetRatio(MOTOR_M4, m4);\n      }\n\n#ifdef CONFIG_DECK_USD\n\n      // Log data to uSD card if configured\n      if (usddeckLoggingEnabled()\n          && usddeckLoggingMode() == usddeckLoggingMode_SynchronousStabilizer\n          && RATE_DO_EXECUTE(usddeckFrequency(), tick)) {\n        usddeckTriggerLogging();\n      }\n\n#endif\n\n      calcSensorToOutputLatency(&sensorData);\n      tick++;\n      STATS_CNT_RATE_EVENT(&stabilizerRate);\n      if (!rateSupervisorValidate(&rateSupervisorContext, xTaskGetTickCount()))\n      {\n        if (!rateWarningDisplayed) {\n          DEBUG_PRINT(\"WARNING: stabilizer loop rate is off (%lu)\\n\",\n                      rateSupervisorLatestCount(&rateSupervisorContext));\n          rateWarningDisplayed = true;\n        }\n      }\n    }\n  }\n}\n\nvoid stabilizerSetEmergencyStop()\n{\n  emergencyStop = true;\n}\n\nvoid stabilizerResetEmergencyStop()\n{\n  emergencyStop = false;\n}\n\nvoid stabilizerSetEmergencyStopTimeout(int timeout)\n{\n  emergencyStop = false;\n  emergencyStopTimeout = timeout;\n}\n\n/**\n * Parameters to set the estimator and controller type\n * for the stabilizer module, or to do an emergency stop\n */\nPARAM_GROUP_START(stabilizer)\n/**\n * @brief Estimator type Any(0), complementary(1), kalman(2) (Default: 0)\n */\n  PARAM_ADD_CORE(PARAM_UINT8, estimator, &estimatorType)\n/**\n * @brief Controller type Any(0), PID(1), Mellinger(2), INDI(3) (Default: 0)\n */\n  PARAM_ADD_CORE(PARAM_UINT8, controller, &controllerType)\n/**\n * @brief If set to nonzero will turn off power\n */\n  PARAM_ADD_CORE(PARAM_UINT8, stop, &emergencyStop)\n  PARAM_GROUP_STOP(stabilizer)\n/**\n * Log group for the current controller target\n *\n * Note: all members may not be updated depending on how the system is used\n */\n  LOG_GROUP_START(ctrltarget)\n/**\n * @brief Desired position X [m]\n */\n  LOG_ADD_CORE(LOG_FLOAT, x, &setpoint.position.x)\n/**\n * @brief Desired position Y [m]\n */\n  LOG_ADD_CORE(LOG_FLOAT, y, &setpoint.position.y)\n/**\n * @brief Desired position X [m]\n */\n  LOG_ADD_CORE(LOG_FLOAT, z, &setpoint.position.z)\n/**\n * @brief Desired velocity X [m/s]\n */\n  LOG_ADD_CORE(LOG_FLOAT, vx, &setpoint.velocity.x)\n/**\n * @brief Desired velocity Y [m/s]\n */\n  LOG_ADD_CORE(LOG_FLOAT, vy, &setpoint.velocity.y)\n/**\n * @brief Desired velocity Z [m/s]\n */\n  LOG_ADD_CORE(LOG_FLOAT, vz, &setpoint.velocity.z)\n/**\n * @brief Desired acceleration X [m/s^2]\n */\n  LOG_ADD_CORE(LOG_FLOAT, ax, &setpoint.acceleration.x)\n/**\n * @brief Desired acceleration Y [m/s^2]\n */\n  LOG_ADD_CORE(LOG_FLOAT, ay, &setpoint.acceleration.y)\n/**\n * @brief Desired acceleration Z [m/s^2]\n */\n  LOG_ADD_CORE(LOG_FLOAT, az, &setpoint.acceleration.z)\n/**\n * @brief Desired attitude, roll [deg]\n */\n  LOG_ADD_CORE(LOG_FLOAT, roll, &setpoint.attitude.roll)\n/**\n * @brief Desired attitude, pitch [deg]\n */\n  LOG_ADD_CORE(LOG_FLOAT, pitch, &setpoint.attitude.pitch)\n/**\n * @brief Desired attitude rate, yaw rate [deg/s]\n */\n  LOG_ADD_CORE(LOG_FLOAT, yaw, &setpoint.attitudeRate.yaw)\n  LOG_GROUP_STOP(ctrltarget)\n/**\n * Logs to set the estimator and controller type\n * for the stabilizer module\n */\n  LOG_GROUP_START(stabilizer)\n/**\n * @brief Estimated roll\n *   Note: Same as stateEstimate.roll\n */\n  LOG_ADD(LOG_FLOAT, roll, &state.attitude.roll)\n/**\n * @brief Estimated pitch\n *   Note: Same as stateEstimate.pitch\n */\n  LOG_ADD(LOG_FLOAT, pitch, &state.attitude.pitch)\n/**\n * @brief Estimated yaw\n *   Note: same as stateEstimate.yaw\n */\n  LOG_ADD(LOG_FLOAT, yaw, &state.attitude.yaw)\n/**\n * @brief Current thrust\n */\n  LOG_ADD(LOG_FLOAT, thrust, &control.thrust)\n/**\n * @brief Rate of stabilizer loop\n */\n  STATS_CNT_RATE_LOG_ADD(rtStab, &stabilizerRate)\n/**\n * @brief Latency from sampling of sensor to motor output\n *    Note: Used for debugging but could also be used as a system test\n */\n  LOG_ADD(LOG_UINT32, intToOut, &inToOutLatency)\n  LOG_GROUP_STOP(stabilizer)\n/**\n * Log group for accelerometer sensor measurement, based on body frame.\n * Compensated for a miss-alignment by gravity at startup.\n *\n * For data on measurement noise please see information from the sensor\n * manufacturer. To see what accelerometer sensor is in your Crazyflie or Bolt\n * please check documentation on the Bitcraze webpage or check the parameter\n * group `imu_sensors`.\n */\n  LOG_GROUP_START(acc)\n/**\n * @brief Acceleration in X [Gs]\n */\n  LOG_ADD_CORE(LOG_FLOAT, x, &sensorData.acc.x)\n/**\n * @brief Acceleration in Y [Gs]\n */\n  LOG_ADD_CORE(LOG_FLOAT, y, &sensorData.acc.y)\n/**\n * @brief Acceleration in Z [Gs]\n */\n  LOG_ADD_CORE(LOG_FLOAT, z, &sensorData.acc.z)\n  LOG_GROUP_STOP(acc)\n#ifdef LOG_SEC_IMU\n  LOG_GROUP_START(accSec)\n  LOG_ADD(LOG_FLOAT, x, &sensorData.accSec.x)\n  LOG_ADD(LOG_FLOAT, y, &sensorData.accSec.y)\n  LOG_ADD(LOG_FLOAT, z, &sensorData.accSec.z)\n  LOG_GROUP_STOP(accSec)\n#endif\n/**\n * Log group for the barometer.\n *\n * For data on measurement noise please see information from the sensor\n * manufacturer. To see what barometer sensor is in your Crazyflie or Bolt\n * please check documentation on the Bitcraze webpage or check the parameter\n * group `imu_sensors`.\n */\n  LOG_GROUP_START(baro)\n/**\n * @brief Altitude above Sea Level [m]\n */\n  LOG_ADD_CORE(LOG_FLOAT, asl, &sensorData.baro.asl)\n/**\n * @brief Temperature [degrees Celsius]\n */\n  LOG_ADD(LOG_FLOAT, temp, &sensorData.baro.temperature)\n/**\n * @brief Air preassure [mbar]\n */\n  LOG_ADD_CORE(LOG_FLOAT, pressure, &sensorData.baro.pressure)\n  LOG_GROUP_STOP(baro)\n/**\n * Log group for gyroscopes.\n *\n * For data on measurement noise please see information from the sensor\n * manufacturer. To see what gyroscope sensor is in your Crazyflie or Bolt\n * please check documentation on the Bitcraze webpage or check the parameter\n * group `imu_sensors`.\n */\n  LOG_GROUP_START(gyro)\n/**\n * @brief Angular velocity (rotation) around the X-axis, after filtering [deg/s]\n */\n  LOG_ADD_CORE(LOG_FLOAT, x, &sensorData.gyro.x)\n/**\n * @brief Angular velocity (rotation) around the Y-axis, after filtering [deg/s]\n */\n  LOG_ADD_CORE(LOG_FLOAT, y, &sensorData.gyro.y)\n/**\n * @brief Angular velocity (rotation) around the Z-axis, after filtering [deg/s]\n */\n  LOG_ADD_CORE(LOG_FLOAT, z, &sensorData.gyro.z)\n  LOG_GROUP_STOP(gyro)\n#ifdef LOG_SEC_IMU\n  LOG_GROUP_START(gyroSec)\n  LOG_ADD(LOG_FLOAT, x, &sensorData.gyroSec.x)\n  LOG_ADD(LOG_FLOAT, y, &sensorData.gyroSec.y)\n  LOG_ADD(LOG_FLOAT, z, &sensorData.gyroSec.z)\n  LOG_GROUP_STOP(gyroSec)\n#endif\n/**\n * Log group for magnetometer.\n *\n * Currently only present on Crazyflie 2.0\n */\n  LOG_GROUP_START(mag)\n/**\n * @brief Magnetometer X axis, after filtering [gauss]\n */\n  LOG_ADD_CORE(LOG_FLOAT, x, &sensorData.mag.x)\n/**\n * @brief Magnetometer Y axis, after filtering [gauss]\n */\n  LOG_ADD_CORE(LOG_FLOAT, y, &sensorData.mag.y)\n/**\n * @brief Magnetometer Z axis, after filtering [gauss]\n */\n  LOG_ADD_CORE(LOG_FLOAT, z, &sensorData.mag.z)\n  LOG_GROUP_STOP(mag)\n  LOG_GROUP_START(controller)\n  LOG_ADD(LOG_INT16, ctr_yaw, &control.yaw)\n  LOG_GROUP_STOP(controller)\n/**\n * Log group for the state estimator, the currently estimated state of the platform.\n *\n * Note: all values may not be updated depending on which estimator that is used.\n */\n  LOG_GROUP_START(stateEstimate)\n/**\n * @brief The estimated position of the platform in the global reference frame, X [m]\n */\n  LOG_ADD_CORE(LOG_FLOAT, x, &state.position.x)\n/**\n * @brief The estimated position of the platform in the global reference frame, Y [m]\n */\n  LOG_ADD_CORE(LOG_FLOAT, y, &state.position.y)\n/**\n * @brief The estimated position of the platform in the global reference frame, Z [m]\n */\n  LOG_ADD_CORE(LOG_FLOAT, z, &state.position.z)\n/**\n * @brief The velocity of the Crazyflie in the global reference frame, X [m/s]\n */\n  LOG_ADD_CORE(LOG_FLOAT, vx, &state.velocity.x)\n/**\n * @brief The velocity of the Crazyflie in the global reference frame, Y [m/s]\n */\n  LOG_ADD_CORE(LOG_FLOAT, vy, &state.velocity.y)\n/**\n * @brief The velocity of the Crazyflie in the global reference frame, Z [m/s]\n */\n  LOG_ADD_CORE(LOG_FLOAT, vz, &state.velocity.z)\n/**\n * @brief The acceleration of the Crazyflie in the global reference frame, X [Gs]\n */\n  LOG_ADD_CORE(LOG_FLOAT, ax, &state.acc.x)\n/**\n * @brief The acceleration of the Crazyflie in the global reference frame, Y [Gs]\n */\n  LOG_ADD_CORE(LOG_FLOAT, ay, &state.acc.y)\n/**\n * @brief The acceleration of the Crazyflie in the global reference frame, without considering gravity, Z [Gs]\n */\n  LOG_ADD_CORE(LOG_FLOAT, az, &state.acc.z)\n/**\n * @brief Attitude, roll angle [deg]\n */\n  LOG_ADD_CORE(LOG_FLOAT, roll, &state.attitude.roll)\n/**\n * @brief Attitude, pitch angle (legacy CF2 body coordinate system, where pitch is inverted) [deg]\n */\n  LOG_ADD_CORE(LOG_FLOAT, pitch, &state.attitude.pitch)\n/**\n * @brief Attitude, yaw angle [deg]\n */\n  LOG_ADD_CORE(LOG_FLOAT, yaw, &state.attitude.yaw)\n/**\n * @brief Attitude as a quaternion, x\n */\n  LOG_ADD_CORE(LOG_FLOAT, qx, &state.attitudeQuaternion.x)\n/**\n * @brief Attitude as a quaternion, y\n */\n  LOG_ADD_CORE(LOG_FLOAT, qy, &state.attitudeQuaternion.y)\n/**\n * @brief Attitude as a quaternion, z\n */\n  LOG_ADD_CORE(LOG_FLOAT, qz, &state.attitudeQuaternion.z)\n/**\n * @brief Attitude as a quaternion, w\n */\n  LOG_ADD_CORE(LOG_FLOAT, qw, &state.attitudeQuaternion.w)\n  LOG_GROUP_STOP(stateEstimate)\n/* SSY191: Add Simulink plots\n */\n  LOG_GROUP_START(simulink)\n  LOG_ADD(LOG_FLOAT, log_1, &l1)\n  LOG_ADD(LOG_FLOAT, log_2, &l2)\n  LOG_ADD(LOG_FLOAT, log_3, &l3)\n  LOG_ADD(LOG_FLOAT, log_4, &l4)\n  LOG_ADD(LOG_FLOAT, log_5, &l5)\n  LOG_ADD(LOG_FLOAT, log_6, &l6)\n  LOG_GROUP_STOP(simulink)\n/*\n * File trailer for generated code.\n *\n * [EOF]\n */\n"},{"name":"crazyflieModel.h","type":"header","group":"","path":"/home/bober2/Desktop/school/SSY191/project2024-group22/generate_code/simulink-model/crazyflie_ert_rtw","tag":"","groupDisplay":"Other files","code":"/*\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * File: crazyflieModel.h\n *\n * Code generated for Simulink model 'crazyflie'.\n *\n * Model version                  : 5.12\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\n * C/C++ source code generated on : Fri Apr  5 15:02:15 2024\n *\n * Target selection: ert.tlc\n * Embedded hardware selection: ARM Compatible->ARM Cortex\n * Code generation objectives:\n *    1. Execution efficiency\n *    2. RAM efficiency\n * Validation result: Not run\n */\n\n#ifndef RTW_HEADER_crazyflieModel_h_\n#define RTW_HEADER_crazyflieModel_h_\n#include <stdbool.h>\n#include <stdint.h>\n#define EMERGENCY_STOP_TIMEOUT_DISABLED (-1)\n\nvoid crazyflieModelInit(StateEstimatorType estimator);\nbool crazyflieModelTest(void);\n\n#endif                                 /* RTW_HEADER_crazyflieModel_h_ */\n\n/*\n * File trailer for generated code.\n *\n * [EOF]\n */\n"}],"trace":"{\"model\":\"crazyflie\",\"sources\":[\"crazyflie.c\",\"crazyflie.h\"],\"categoricalProps\":[\"ModelElemCategory\",\"StorageClass\"],\"categoricalValues\":[\"InternalData\",\"Default\",\"Inports\",\"Outports\"],\"sidPrefixes\":[\"crazyflie\"],\"fileRecords\":{\"0\":{\"records\":[{\"tk\":[65,3,65,17],\"els\":[\"0:322\"]},{\"tk\":[65,18,65,19],\"els\":[\"0:322\"]},{\"tk\":[65,21,65,24],\"els\":[\"0:400\"]},{\"tk\":[65,25,65,26],\"els\":[\"0:400\"]},{\"tk\":[65,27,65,38],\"els\":[\"0:8\"]},{\"tk\":[65,39,65,45],\"els\":[\"0:8\"]},{\"tk\":[65,46,65,47],\"els\":[\"0:406\"]},{\"tk\":[65,48,65,60],\"els\":[\"0:406\",\"0:402\"]},{\"tk\":[65,61,65,73],\"els\":[\"0:406\",\"0:402\"]},{\"tk\":[65,73,65,74],\"els\":[\"0:406\",\"0:402\"]},{\"tk\":[65,74,65,75],\"els\":[\"0:406\"]},{\"tk\":[65,78,65,79],\"els\":[\"0:404\"]},{\"tk\":[66,5,66,8],\"els\":[\"0:404\"]},{\"tk\":[66,9,66,10],\"els\":[\"0:322\"]},{\"tk\":[66,11,66,29],\"els\":[\"0:318\"]},{\"tk\":[66,30,66,31],\"els\":[\"0:318\"]},{\"tk\":[66,32,66,37],\"els\":[\"0:296:36-52\",\"0:296\",\"0:296::25\"]},{\"tk\":[66,38,66,49],\"els\":[\"0:6\"]},{\"tk\":[66,50,66,55],\"els\":[\"0:6\"]},{\"tk\":[66,57,66,68],\"els\":[\"0:7\"]},{\"tk\":[66,69,66,74],\"els\":[\"0:7\"]},{\"tk\":[66,76,66,77],\"els\":[\"0:405\"]},{\"tk\":[66,78,66,81],\"els\":[\"0:405\"]},{\"tk\":[67,3,67,17],\"els\":[\"0:322\"]},{\"tk\":[67,18,67,19],\"els\":[\"0:322\"]},{\"tk\":[67,20,67,25],\"els\":[\"0:297:62-98\",\"0:297\",\"0:297::25\"]},{\"tk\":[67,26,67,27],\"els\":[\"0:297:68-73\",\"0:297\",\"0:297::25\"]},{\"tk\":[67,27,67,38],\"els\":[\"0:5\"]},{\"tk\":[67,39,67,44],\"els\":[\"0:5\"]},{\"tk\":[67,46,67,50],\"els\":[\"0:297:74-97\",\"0:297\",\"0:297::25\"]},{\"tk\":[67,51,67,62],\"els\":[\"0:6\"]},{\"tk\":[67,63,67,68],\"els\":[\"0:6\"]},{\"tk\":[67,69,67,70],\"els\":[\"0:297:79-87\",\"0:297\",\"0:297::25\"]},{\"tk\":[68,5,68,16],\"els\":[\"0:6\"]},{\"tk\":[68,17,68,22],\"els\":[\"0:6\"]},{\"tk\":[68,23,68,24],\"els\":[\"0:297:79-96\",\"0:297\",\"0:297::25\"]},{\"tk\":[68,25,68,36],\"els\":[\"0:7\"]},{\"tk\":[68,37,68,42],\"els\":[\"0:7\"]},{\"tk\":[68,43,68,44],\"els\":[\"0:297:88-96\",\"0:297\",\"0:297::25\"]},{\"tk\":[68,45,68,56],\"els\":[\"0:7\"]},{\"tk\":[68,57,68,62],\"els\":[\"0:7\"]},{\"tk\":[68,65,68,66],\"els\":[\"0:319\"]},{\"tk\":[69,5,69,23],\"els\":[\"0:319\"]},{\"tk\":[69,24,69,25],\"els\":[\"0:405\"]},{\"tk\":[69,26,69,29],\"els\":[\"0:405\"]},{\"tk\":[69,30,69,31],\"els\":[\"0:322\"]},{\"tk\":[69,33,69,36],\"els\":[\"0:400\"]},{\"tk\":[69,37,69,38],\"els\":[\"0:400\"]},{\"tk\":[69,39,69,50],\"els\":[\"0:9\"]},{\"tk\":[69,51,69,57],\"els\":[\"0:9\"]},{\"tk\":[69,58,69,59],\"els\":[\"0:406\"]},{\"tk\":[70,5,70,17],\"els\":[\"0:406\",\"0:402\"]},{\"tk\":[70,18,70,30],\"els\":[\"0:406\",\"0:402\"]},{\"tk\":[70,30,70,31],\"els\":[\"0:406\",\"0:402\"]},{\"tk\":[70,31,70,32],\"els\":[\"0:406\"]},{\"tk\":[70,35,70,36],\"els\":[\"0:404\"]},{\"tk\":[70,37,70,40],\"els\":[\"0:404\"]},{\"tk\":[75,3,75,12],\"els\":[\"0:368#out:1\"]},{\"tk\":[75,13,75,14],\"els\":[\"0:368\"]},{\"tk\":[75,15,75,26],\"els\":[\"0:12\"]},{\"tk\":[75,27,75,35],\"els\":[\"0:12\"]},{\"tk\":[75,36,75,37],\"els\":[\"0:368\"]},{\"tk\":[75,38,75,52],\"els\":[\"0:322\"]},{\"tk\":[81,3,81,11],\"els\":[\"0:377#out:1\"]},{\"tk\":[81,12,81,13],\"els\":[\"0:372\"]},{\"tk\":[81,14,81,20],\"els\":[\"0:369\"]},{\"tk\":[81,21,81,22],\"els\":[\"0:369\"]},{\"tk\":[81,23,81,32],\"els\":[\"0:368#out:1\"]},{\"tk\":[81,33,81,34],\"els\":[\"0:372\"]},{\"tk\":[81,35,81,47],\"els\":[\"0:371\"]},{\"tk\":[81,48,81,77],\"els\":[\"0:371\"]},{\"tk\":[86,3,86,11],\"els\":[\"0:436#out:1\"]},{\"tk\":[86,12,86,13],\"els\":[\"0:436\"]},{\"tk\":[86,14,86,25],\"els\":[\"0:13\"]},{\"tk\":[86,26,86,35],\"els\":[\"0:13\"]},{\"tk\":[86,36,86,37],\"els\":[\"0:436\"]},{\"tk\":[86,38,86,52],\"els\":[\"0:322\"]},{\"tk\":[92,3,92,11],\"els\":[\"0:437#out:1\"]},{\"tk\":[92,12,92,13],\"els\":[\"0:437\"]},{\"tk\":[92,14,92,20],\"els\":[\"0:435\"]},{\"tk\":[92,21,92,22],\"els\":[\"0:435\"]},{\"tk\":[92,23,92,31],\"els\":[\"0:436#out:1\"]},{\"tk\":[92,32,92,33],\"els\":[\"0:437\"]},{\"tk\":[92,34,92,46],\"els\":[\"0:434\"]},{\"tk\":[92,47,92,77],\"els\":[\"0:434\"]},{\"tk\":[99,3,99,6],\"els\":[\"0:143\"]},{\"tk\":[99,7,99,8],\"els\":[\"0:143\"]},{\"tk\":[99,9,99,10],\"els\":[\"0:463\"]},{\"tk\":[99,10,99,18],\"els\":[\"0:377#out:1\"]},{\"tk\":[99,19,99,20],\"els\":[\"0:374\"]},{\"tk\":[99,21,99,22],\"els\":[\"0:469\"]},{\"tk\":[99,22,99,30],\"els\":[\"0:437#out:1\"]},{\"tk\":[100,3,100,5],\"els\":[\"0:143\"]},{\"tk\":[100,7,100,10],\"els\":[\"0:143\"]},{\"tk\":[100,11,100,12],\"els\":[\"0:143\"]},{\"tk\":[100,13,100,20],\"els\":[\"0:143\"]},{\"tk\":[101,5,101,7],\"els\":[\"0:143\"]},{\"tk\":[101,9,101,12],\"els\":[\"0:143\"]},{\"tk\":[101,13,101,15],\"els\":[\"0:143\"]},{\"tk\":[101,16,101,19],\"els\":[\"0:143\"]},{\"tk\":[103,7,103,18],\"els\":[\"0:143\",\"0:51\"]},{\"tk\":[103,19,103,26],\"els\":[\"0:143\",\"0:51\"]},{\"tk\":[103,27,103,28],\"els\":[\"0:143\",\"0:51\"]},{\"tk\":[103,29,103,30],\"els\":[\"0:143\"]},{\"tk\":[103,39,103,42],\"els\":[\"0:143\"]},{\"tk\":[106,7,106,18],\"els\":[\"0:143\",\"0:51\"]},{\"tk\":[106,19,106,26],\"els\":[\"0:143\",\"0:51\"]},{\"tk\":[106,27,106,28],\"els\":[\"0:143\",\"0:51\"]},{\"tk\":[106,29,106,31],\"els\":[\"0:143\"]},{\"tk\":[110,5,110,16],\"els\":[\"0:51\"]},{\"tk\":[110,17,110,24],\"els\":[\"0:51\"]},{\"tk\":[110,25,110,26],\"els\":[\"0:51\"]},{\"tk\":[110,27,110,39],\"els\":[\"0:143\"]},{\"tk\":[119,3,119,6],\"els\":[\"0:143\"]},{\"tk\":[119,7,119,8],\"els\":[\"0:144\"]},{\"tk\":[119,9,119,10],\"els\":[\"0:466\"]},{\"tk\":[119,10,119,18],\"els\":[\"0:377#out:1\"]},{\"tk\":[119,19,119,20],\"els\":[\"0:375\"]},{\"tk\":[119,21,119,29],\"els\":[\"0:437#out:1\"]},{\"tk\":[120,3,120,5],\"els\":[\"0:144\"]},{\"tk\":[120,7,120,10],\"els\":[\"0:143\"]},{\"tk\":[120,11,120,12],\"els\":[\"0:144\"]},{\"tk\":[120,13,120,20],\"els\":[\"0:144\"]},{\"tk\":[121,5,121,7],\"els\":[\"0:144\"]},{\"tk\":[121,9,121,12],\"els\":[\"0:143\"]},{\"tk\":[121,13,121,15],\"els\":[\"0:144\"]},{\"tk\":[121,16,121,19],\"els\":[\"0:144\"]},{\"tk\":[123,7,123,18],\"els\":[\"0:144\",\"0:52\"]},{\"tk\":[123,19,123,26],\"els\":[\"0:144\",\"0:52\"]},{\"tk\":[123,27,123,28],\"els\":[\"0:144\",\"0:52\"]},{\"tk\":[123,29,123,30],\"els\":[\"0:144\"]},{\"tk\":[123,39,123,42],\"els\":[\"0:143\"]},{\"tk\":[126,7,126,18],\"els\":[\"0:144\",\"0:52\"]},{\"tk\":[126,19,126,26],\"els\":[\"0:144\",\"0:52\"]},{\"tk\":[126,27,126,28],\"els\":[\"0:144\",\"0:52\"]},{\"tk\":[126,29,126,31],\"els\":[\"0:144\"]},{\"tk\":[130,5,130,16],\"els\":[\"0:52\"]},{\"tk\":[130,17,130,24],\"els\":[\"0:52\"]},{\"tk\":[130,25,130,26],\"els\":[\"0:52\"]},{\"tk\":[130,27,130,39],\"els\":[\"0:144\"]},{\"tk\":[138,3,138,6],\"els\":[\"0:143\"]},{\"tk\":[138,7,138,8],\"els\":[\"0:145\"]},{\"tk\":[138,9,138,17],\"els\":[\"0:377#out:1\"]},{\"tk\":[138,18,138,19],\"els\":[\"0:376\"]},{\"tk\":[138,20,138,28],\"els\":[\"0:437#out:1\"]},{\"tk\":[139,3,139,5],\"els\":[\"0:145\"]},{\"tk\":[139,7,139,10],\"els\":[\"0:143\"]},{\"tk\":[139,11,139,12],\"els\":[\"0:145\"]},{\"tk\":[139,13,139,20],\"els\":[\"0:145\"]},{\"tk\":[140,5,140,7],\"els\":[\"0:145\"]},{\"tk\":[140,9,140,12],\"els\":[\"0:143\"]},{\"tk\":[140,13,140,15],\"els\":[\"0:145\"]},{\"tk\":[140,16,140,19],\"els\":[\"0:145\"]},{\"tk\":[142,7,142,18],\"els\":[\"0:145\",\"0:53\"]},{\"tk\":[142,19,142,26],\"els\":[\"0:145\",\"0:53\"]},{\"tk\":[142,27,142,28],\"els\":[\"0:145\",\"0:53\"]},{\"tk\":[142,29,142,30],\"els\":[\"0:145\"]},{\"tk\":[142,39,142,42],\"els\":[\"0:143\"]},{\"tk\":[145,7,145,18],\"els\":[\"0:145\",\"0:53\"]},{\"tk\":[145,19,145,26],\"els\":[\"0:145\",\"0:53\"]},{\"tk\":[145,27,145,28],\"els\":[\"0:145\",\"0:53\"]},{\"tk\":[145,29,145,31],\"els\":[\"0:145\"]},{\"tk\":[149,5,149,16],\"els\":[\"0:53\"]},{\"tk\":[149,17,149,24],\"els\":[\"0:53\"]},{\"tk\":[149,25,149,26],\"els\":[\"0:53\"]},{\"tk\":[149,27,149,39],\"els\":[\"0:145\"]},{\"tk\":[158,3,158,6],\"els\":[\"0:143\"]},{\"tk\":[158,7,158,8],\"els\":[\"0:146\"]},{\"tk\":[158,9,158,17],\"els\":[\"0:377#out:1\"]},{\"tk\":[158,18,158,19],\"els\":[\"0:377\"]},{\"tk\":[158,20,158,21],\"els\":[\"0:470\"]},{\"tk\":[158,21,158,29],\"els\":[\"0:437#out:1\"]},{\"tk\":[159,3,159,5],\"els\":[\"0:146\"]},{\"tk\":[159,7,159,10],\"els\":[\"0:143\"]},{\"tk\":[159,11,159,12],\"els\":[\"0:146\"]},{\"tk\":[159,13,159,20],\"els\":[\"0:146\"]},{\"tk\":[160,5,160,7],\"els\":[\"0:146\"]},{\"tk\":[160,9,160,12],\"els\":[\"0:143\"]},{\"tk\":[160,13,160,15],\"els\":[\"0:146\"]},{\"tk\":[160,16,160,19],\"els\":[\"0:146\"]},{\"tk\":[162,7,162,18],\"els\":[\"0:146\",\"0:54\"]},{\"tk\":[162,19,162,26],\"els\":[\"0:146\",\"0:54\"]},{\"tk\":[162,27,162,28],\"els\":[\"0:146\",\"0:54\"]},{\"tk\":[162,29,162,30],\"els\":[\"0:146\"]},{\"tk\":[162,39,162,42],\"els\":[\"0:143\"]},{\"tk\":[165,7,165,18],\"els\":[\"0:146\",\"0:54\"]},{\"tk\":[165,19,165,26],\"els\":[\"0:146\",\"0:54\"]},{\"tk\":[165,27,165,28],\"els\":[\"0:146\",\"0:54\"]},{\"tk\":[165,29,165,31],\"els\":[\"0:146\"]},{\"tk\":[169,5,169,16],\"els\":[\"0:54\"]},{\"tk\":[169,17,169,24],\"els\":[\"0:54\"]},{\"tk\":[169,25,169,26],\"els\":[\"0:54\"]},{\"tk\":[169,27,169,39],\"els\":[\"0:146\"]},{\"tk\":[175,3,175,15],\"els\":[\"0:402\"]},{\"tk\":[175,16,175,28],\"els\":[\"0:402\"]},{\"tk\":[175,28,175,29],\"els\":[\"0:402\"]},{\"tk\":[175,29,175,30],\"els\":[\"0:402\"]},{\"tk\":[175,32,175,33],\"els\":[\"0:402\"]},{\"tk\":[175,34,175,48],\"els\":[\"0:322\"]},{\"tk\":[176,3,176,15],\"els\":[\"0:402\"]},{\"tk\":[176,16,176,28],\"els\":[\"0:402\"]},{\"tk\":[176,28,176,29],\"els\":[\"0:402\"]},{\"tk\":[176,29,176,30],\"els\":[\"0:402\"]},{\"tk\":[176,32,176,33],\"els\":[\"0:402\"]},{\"tk\":[176,34,176,48],\"els\":[\"0:322\"]},{\"tk\":[179,3,179,15],\"els\":[\"0:371\"]},{\"tk\":[179,16,179,45],\"els\":[\"0:371\"]},{\"tk\":[179,46,179,48],\"els\":[\"0:371\"]},{\"tk\":[179,49,179,54],\"els\":[\"0:371\"]},{\"tk\":[179,55,179,56],\"els\":[\"0:371\"]},{\"tk\":[179,57,179,66],\"els\":[\"0:368#out:1\"]},{\"tk\":[182,3,182,15],\"els\":[\"0:434\"]},{\"tk\":[182,16,182,46],\"els\":[\"0:434\"]},{\"tk\":[182,47,182,49],\"els\":[\"0:434\"]},{\"tk\":[182,50,182,55],\"els\":[\"0:434\"]},{\"tk\":[182,56,182,57],\"els\":[\"0:434\"]},{\"tk\":[182,58,182,66],\"els\":[\"0:436#out:1\"]}]},\"1\":{\"records\":[{\"tk\":[36,3,36,9],\"els\":[\"1:402\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[36,10,36,22],\"els\":[\"1:402\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[36,22,36,23],\"els\":[\"1:402\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[36,23,36,24],\"els\":[\"1:402\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[36,24,36,25],\"els\":[\"1:402\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[36,25,36,26],\"els\":[\"1:402\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[37,3,37,9],\"els\":[\"1:371\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[37,10,37,39],\"els\":[\"1:371\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[37,39,37,40],\"els\":[\"1:371\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[38,3,38,9],\"els\":[\"1:434\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[38,10,38,40],\"els\":[\"1:434\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[38,40,38,41],\"els\":[\"1:434\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[43,3,43,9],\"els\":[\"1:11\"],\"ct\":{\"0\":2,\"1\":1}},{\"tk\":[43,10,43,21],\"els\":[\"1:11\"],\"ct\":{\"0\":2,\"1\":1}},{\"tk\":[43,21,43,22],\"els\":[\"1:11\"],\"ct\":{\"0\":2,\"1\":1}},{\"tk\":[44,3,44,9],\"els\":[\"1:12\"],\"ct\":{\"1\":1,\"0\":2}},{\"tk\":[44,10,44,18],\"els\":[\"1:12\"],\"ct\":{\"0\":2,\"1\":1}},{\"tk\":[44,18,44,19],\"els\":[\"1:12\"],\"ct\":{\"0\":2,\"1\":1}},{\"tk\":[45,3,45,9],\"els\":[\"1:13\"],\"ct\":{\"0\":2,\"1\":1}},{\"tk\":[45,10,45,19],\"els\":[\"1:13\"],\"ct\":{\"0\":2,\"1\":1}},{\"tk\":[45,19,45,20],\"els\":[\"1:13\"],\"ct\":{\"0\":2,\"1\":1}},{\"tk\":[46,3,46,9],\"els\":[\"1:172\"],\"ct\":{\"0\":2,\"1\":1}},{\"tk\":[46,10,46,21],\"els\":[\"1:172\"],\"ct\":{\"1\":1,\"0\":2}},{\"tk\":[46,21,46,22],\"els\":[\"1:172\"],\"ct\":{\"0\":2,\"1\":1}},{\"tk\":[47,3,47,9],\"els\":[\"1:5\"],\"ct\":{\"0\":2,\"1\":1}},{\"tk\":[47,10,47,15],\"els\":[\"1:5\"],\"ct\":{\"1\":1,\"0\":2}},{\"tk\":[47,15,47,16],\"els\":[\"1:5\"],\"ct\":{\"0\":2,\"1\":1}},{\"tk\":[48,3,48,9],\"els\":[\"1:6\"],\"ct\":{\"0\":2,\"1\":1}},{\"tk\":[48,10,48,15],\"els\":[\"1:6\"],\"ct\":{\"0\":2,\"1\":1}},{\"tk\":[48,15,48,16],\"els\":[\"1:6\"],\"ct\":{\"0\":2,\"1\":1}},{\"tk\":[49,3,49,9],\"els\":[\"1:7\"],\"ct\":{\"0\":2,\"1\":1}},{\"tk\":[49,10,49,15],\"els\":[\"1:7\"],\"ct\":{\"0\":2,\"1\":1}},{\"tk\":[49,15,49,16],\"els\":[\"1:7\"],\"ct\":{\"0\":2,\"1\":1}},{\"tk\":[50,3,50,9],\"els\":[\"1:8\"],\"ct\":{\"0\":2,\"1\":1}},{\"tk\":[50,10,50,16],\"els\":[\"1:8\"],\"ct\":{\"0\":2,\"1\":1}},{\"tk\":[50,16,50,17],\"els\":[\"1:8\"],\"ct\":{\"0\":2,\"1\":1}},{\"tk\":[51,3,51,9],\"els\":[\"1:9\"],\"ct\":{\"0\":2,\"1\":1}},{\"tk\":[51,10,51,16],\"els\":[\"1:9\"],\"ct\":{\"0\":2,\"1\":1}},{\"tk\":[51,16,51,17],\"els\":[\"1:9\"],\"ct\":{\"0\":2,\"1\":1}},{\"tk\":[52,3,52,9],\"els\":[\"1:10\"],\"ct\":{\"0\":2,\"1\":1}},{\"tk\":[52,10,52,16],\"els\":[\"1:10\"],\"ct\":{\"0\":2,\"1\":1}},{\"tk\":[52,16,52,17],\"els\":[\"1:10\"],\"ct\":{\"0\":2,\"1\":1}},{\"tk\":[53,3,53,10],\"els\":[\"1:254\"],\"ct\":{\"0\":2,\"1\":1}},{\"tk\":[53,11,53,17],\"els\":[\"1:254\"],\"ct\":{\"0\":2,\"1\":1}},{\"tk\":[53,17,53,18],\"els\":[\"1:254\"],\"ct\":{\"0\":2,\"1\":1}},{\"tk\":[54,3,54,10],\"els\":[\"1:255\"],\"ct\":{\"0\":2,\"1\":1}},{\"tk\":[54,11,54,17],\"els\":[\"1:255\"],\"ct\":{\"1\":1,\"0\":2}},{\"tk\":[54,17,54,18],\"els\":[\"1:255\"],\"ct\":{\"1\":1,\"0\":2}},{\"tk\":[59,3,59,11],\"els\":[\"1:51\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[59,12,59,19],\"els\":[\"1:51\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[59,19,59,20],\"els\":[\"1:51\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[60,3,60,11],\"els\":[\"1:52\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[60,12,60,19],\"els\":[\"1:52\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[60,19,60,20],\"els\":[\"1:52\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[61,3,61,11],\"els\":[\"1:53\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[61,12,61,19],\"els\":[\"1:53\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[61,19,61,20],\"els\":[\"1:53\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[62,3,62,11],\"els\":[\"1:54\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[62,12,62,19],\"els\":[\"1:54\"],\"ct\":{\"1\":1,\"0\":3}},{\"tk\":[62,19,62,20],\"els\":[\"1:54\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[63,3,63,9],\"els\":[\"1:55\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[63,10,63,14],\"els\":[\"1:55\"],\"ct\":{\"1\":1,\"0\":3}},{\"tk\":[63,14,63,15],\"els\":[\"1:55\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[64,3,64,9],\"els\":[\"1:56\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[64,10,64,14],\"els\":[\"1:56\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[64,14,64,15],\"els\":[\"1:56\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[65,3,65,9],\"els\":[\"1:78\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[65,10,65,14],\"els\":[\"1:78\"],\"ct\":{\"1\":1,\"0\":3}},{\"tk\":[65,14,65,15],\"els\":[\"1:78\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[66,3,66,9],\"els\":[\"1:182\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[66,10,66,14],\"els\":[\"1:182\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[66,14,66,15],\"els\":[\"1:182\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[67,3,67,9],\"els\":[\"1:183\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[67,10,67,14],\"els\":[\"1:183\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[67,14,67,15],\"els\":[\"1:183\"],\"ct\":{\"1\":1,\"0\":3}},{\"tk\":[68,3,68,9],\"els\":[\"1:184\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[68,10,68,14],\"els\":[\"1:184\"],\"ct\":{\"0\":3,\"1\":1}},{\"tk\":[68,14,68,15],\"els\":[\"1:184\"],\"ct\":{\"0\":3,\"1\":1}}]}}}","blocks":[{"RTWName":"<Root>/Base_Thrust","SIDString":"crazyflie:11"},{"RTWName":"<Root>/Ref_Roll","SIDString":"crazyflie:12"},{"RTWName":"<Root>/Ref_Pitch","SIDString":"crazyflie:13"},{"RTWName":"<Root>/Ref_YawRate","SIDString":"crazyflie:172"},{"RTWName":"<Root>/Acc_x","SIDString":"crazyflie:5"},{"RTWName":"<Root>/Acc_y","SIDString":"crazyflie:6"},{"RTWName":"<Root>/Acc_z","SIDString":"crazyflie:7"},{"RTWName":"<Root>/Gyro_x","SIDString":"crazyflie:8"},{"RTWName":"<Root>/Gyro_y","SIDString":"crazyflie:9"},{"RTWName":"<Root>/Gyro_z","SIDString":"crazyflie:10"},{"RTWName":"<Root>/Flow_x","SIDString":"crazyflie:254"},{"RTWName":"<Root>/Flow_y","SIDString":"crazyflie:255"},{"RTWName":"<Root>/Discrete-Time\nIntegrator","SIDString":"crazyflie:371"},{"RTWName":"<Root>/Gain","SIDString":"crazyflie:369"},{"RTWName":"<Root>/Gain1","SIDString":"crazyflie:466"},{"RTWName":"<Root>/Gain2","SIDString":"crazyflie:467"},{"RTWName":"<Root>/Gain3","SIDString":"crazyflie:463"},{"RTWName":"<Root>/Gain4","SIDString":"crazyflie:468"},{"RTWName":"<Root>/Gain5","SIDString":"crazyflie:469"},{"RTWName":"<Root>/Gain6","SIDString":"crazyflie:470"},{"RTWName":"<Root>/Gain7","SIDString":"crazyflie:471"},{"RTWName":"<Root>/Gain8","SIDString":"crazyflie:472"},{"RTWName":"<Root>/Mux","SIDString":"crazyflie:320"},{"RTWName":"<Root>/Mux1","SIDString":"crazyflie:365"},{"RTWName":"<S1>/Ref_Pitch","SIDString":"crazyflie:439"},{"RTWName":"<S1>/pitch","SIDString":"crazyflie:440"},{"RTWName":"<S1>/Discrete-Time\nIntegrator1","SIDString":"crazyflie:434"},{"RTWName":"<S1>/Gain6","SIDString":"crazyflie:435"},{"RTWName":"<S1>/Sum6","SIDString":"crazyflie:436"},{"RTWName":"<S1>/Sum7","SIDString":"crazyflie:437"},{"RTWName":"<S1>/Out1","SIDString":"crazyflie:441"},{"RTWName":"<S2>/Fx_B","SIDString":"crazyflie:356"},{"RTWName":"<S2>/Fy_B","SIDString":"crazyflie:357"},{"RTWName":"<S2>/Fz_B","SIDString":"crazyflie:358"},{"RTWName":"<S2>/In4","SIDString":"crazyflie:359"},{"RTWName":"<S2>/Delay","SIDString":"crazyflie:402"},{"RTWName":"<S2>/Demux","SIDString":"crazyflie:361"},{"RTWName":"<S2>/Discrete-Time\nIntegrator","SIDString":"crazyflie:409"},{"RTWName":"<S2>/Gain","SIDString":"crazyflie:400"},{"RTWName":"<S2>/Gain1","SIDString":"crazyflie:404"},{"RTWName":"<S2>/Gain2","SIDString":"crazyflie:405"},{"RTWName":"<S2>/Mux1","SIDString":"crazyflie:321"},{"RTWName":"<S2>/Scope","SIDString":"crazyflie:343"},{"RTWName":"<S2>/Scope1","SIDString":"crazyflie:408"},{"RTWName":"<S2>/Scope2","SIDString":"crazyflie:410"},{"RTWName":"<S3>/Fx_B","SIDString":"crazyflie:299"},{"RTWName":"<S3>/Fy_B","SIDString":"crazyflie:300"},{"RTWName":"<S3>/Fz_B","SIDString":"crazyflie:301"},{"RTWName":"<S3>/Gain","SIDString":"crazyflie:318"},{"RTWName":"<S3>/Gain1","SIDString":"crazyflie:319"},{"RTWName":"<S4>:1","SIDString":"crazyflie:296:1"},{"RTWName":"<S5>:1","SIDString":"crazyflie:297:1"},{"RTWName":"<S3>/Scope","SIDString":"crazyflie:336"},{"RTWName":"<S3>/roll","SIDString":"crazyflie:302"},{"RTWName":"<S3>/pitch","SIDString":"crazyflie:303"},{"RTWName":"<S2>/Sum","SIDString":"crazyflie:406"},{"RTWName":"<S2>/Sum1","SIDString":"crazyflie:322"},{"RTWName":"<S2>/roll","SIDString":"crazyflie:362"},{"RTWName":"<S2>/pitch","SIDString":"crazyflie:363"},{"RTWName":"<Root>/Sum","SIDString":"crazyflie:368"},{"RTWName":"<Root>/Sum1","SIDString":"crazyflie:372"},{"RTWName":"<Root>/Sum2","SIDString":"crazyflie:374"},{"RTWName":"<Root>/Sum3","SIDString":"crazyflie:375"},{"RTWName":"<Root>/Sum4","SIDString":"crazyflie:376"},{"RTWName":"<Root>/Sum5","SIDString":"crazyflie:377"},{"RTWName":"<Root>/Terminator","SIDString":"crazyflie:447"},{"RTWName":"<Root>/ToUint16","SIDString":"crazyflie:143"},{"RTWName":"<Root>/ToUint16_1","SIDString":"crazyflie:144"},{"RTWName":"<Root>/ToUint16_2","SIDString":"crazyflie:145"},{"RTWName":"<Root>/ToUint16_3","SIDString":"crazyflie:146"},{"RTWName":"<Root>/log_Acc_x","SIDString":"crazyflie:151"},{"RTWName":"<Root>/log_Acc_y","SIDString":"crazyflie:153"},{"RTWName":"<Root>/log_Acc_z","SIDString":"crazyflie:154"},{"RTWName":"<Root>/log_Gyro_x","SIDString":"crazyflie:179"},{"RTWName":"<Root>/log_Gyro_y","SIDString":"crazyflie:180"},{"RTWName":"<Root>/log_Gyro_z","SIDString":"crazyflie:181"},{"RTWName":"<Root>/Motor_1","SIDString":"crazyflie:51"},{"RTWName":"<Root>/Motor_2","SIDString":"crazyflie:52"},{"RTWName":"<Root>/Motor_3","SIDString":"crazyflie:53"},{"RTWName":"<Root>/Motor_4","SIDString":"crazyflie:54"},{"RTWName":"<Root>/Log1","SIDString":"crazyflie:55"},{"RTWName":"<Root>/Log2","SIDString":"crazyflie:56"},{"RTWName":"<Root>/Log3","SIDString":"crazyflie:78"},{"RTWName":"<Root>/Log4","SIDString":"crazyflie:182"},{"RTWName":"<Root>/Log5","SIDString":"crazyflie:183"},{"RTWName":"<Root>/Log6","SIDString":"crazyflie:184"},{"RTWName":"<Root>/Subsystem","SIDString":"crazyflie:438"},{"RTWName":"<Root>/Subsystem1","SIDString":"crazyflie:355"},{"RTWName":"<S2>/Subsystem","SIDString":"crazyflie:298"},{"RTWName":"<S3>/MATLAB Function","SIDString":"crazyflie:296"},{"RTWName":"<S3>/MATLAB Function1","SIDString":"crazyflie:297"}],"coverage":[{"id":"SimulinkCoverage","name":"Simulink Coverage","files":[]},{"id":"Bullseye","name":"Bullseye Coverage","files":[]},{"id":"LDRA","name":"LDRA Testbed","files":[]}]};