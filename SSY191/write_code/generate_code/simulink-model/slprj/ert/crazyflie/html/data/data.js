var dataJson = {"arch":{"ispc":false,"isunix":true,"ismac":false},"build":"crazyflie","ref":true,"files":[{"name":"crazyflie.c","type":"source","group":"model","path":"/home/bober2/Desktop/school/SSY191/project2024-group22/generate_code/simulink-model/slprj/ert/crazyflie","tag":"","groupDisplay":"Model files","code":"/*\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * File: crazyflie.c\n *\n * Code generated for Simulink model 'crazyflie'.\n *\n * Model version                  : 5.9\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\n * C/C++ source code generated on : Fri Apr  5 14:23:45 2024\n *\n * Target selection: ert.tlc\n * Embedded hardware selection: ARM Compatible->ARM Cortex\n * Code generation objectives:\n *    1. Execution efficiency\n *    2. RAM efficiency\n * Validation result: Not run\n */\n\n#include \"crazyflie.h\"\n\n/* Output and update for referenced model: 'crazyflie' */\nvoid crazyflie(const real_T *rtu_Ref_Roll, const real_T *rtu_Ref_Pitch, const\n               real_T *rtu_Acc_x, const real_T *rtu_Acc_y, const real_T\n               *rtu_Acc_z, const real_T *rtu_Gyro_x, const real_T *rtu_Gyro_y,\n               uint16_T *rty_Motor_1, uint16_T *rty_Motor_2, uint16_T\n               *rty_Motor_4, DW_crazyflie_f_T *localDW)\n{\n  real_T rtb_Gain_o_idx_0;\n  real_T rtb_Gain_o_idx_1;\n  real_T rtb_Sum1_i;\n  real_T rtb_Sum1_idx_1;\n  real_T rtb_Sum7;\n  real_T rtb_phi;\n  real_T tmp;\n\n  /* MATLAB Function: '<S3>/MATLAB Function' */\n  /* MATLAB Function 'Subsystem1/Subsystem/MATLAB Function': '<S4>:1' */\n  /* '<S4>:1:3' phi= atan2(Fy_B,Fz_b); */\n  rtb_Sum7 = *rtu_Acc_y;\n  rtb_Sum1_i = *rtu_Acc_z;\n\n  /* MATLAB Function: '<S3>/MATLAB Function1' */\n  /*  fx or -fx ???? */\n  /* MATLAB Function 'Subsystem1/Subsystem/MATLAB Function1': '<S5>:1' */\n  /* '<S5>:1:3' theta = atan2(-Fx_B,sqrt((Fy_B)^2+(Fz_B)^2)); */\n  rtb_Sum1_idx_1 = -*rtu_Acc_x;\n  rtb_phi = sqrt(*rtu_Acc_y * *rtu_Acc_y + *rtu_Acc_z * *rtu_Acc_z);\n\n  /* Gain: '<S2>/Gain' */\n  rtb_Gain_o_idx_0 = 0.1 * *rtu_Gyro_x;\n  rtb_Gain_o_idx_1 = 0.1 * *rtu_Gyro_y;\n\n  /* Sum: '<S2>/Sum1' incorporates:\n   *  Delay: '<S2>/Delay'\n   *  Gain: '<S2>/Gain1'\n   *  Gain: '<S2>/Gain2'\n   *  Gain: '<S3>/Gain'\n   *  Gain: '<S3>/Gain1'\n   *  MATLAB Function: '<S3>/MATLAB Function'\n   *  MATLAB Function: '<S3>/MATLAB Function1'\n   *  Sum: '<S2>/Sum'\n   */\n  rtb_Gain_o_idx_0 = 57.295779513082323 * atan2(rtb_Sum7, rtb_Sum1_i) * 0.2 +\n    (rtb_Gain_o_idx_0 + localDW->Delay_DSTATE[0]) * 0.8;\n  rtb_Sum1_idx_1 = 57.295779513082323 * atan2(rtb_Sum1_idx_1, rtb_phi) * 0.2 +\n    (rtb_Gain_o_idx_1 + localDW->Delay_DSTATE[1]) * 0.8;\n\n  /* Sum: '<Root>/Sum' */\n  rtb_phi = *rtu_Ref_Roll - rtb_Gain_o_idx_0;\n\n  /* Sum: '<S1>/Sum6' */\n  rtb_Gain_o_idx_1 = *rtu_Ref_Pitch - rtb_Sum1_idx_1;\n\n  /* Sum: '<S1>/Sum7' incorporates:\n   *  DiscreteIntegrator: '<S1>/Discrete-Time Integrator1'\n   */\n  rtb_Sum7 = rtb_Gain_o_idx_1 + localDW->DiscreteTimeIntegrator1_DSTATE;\n\n  /* Sum: '<Root>/Sum1' incorporates:\n   *  DiscreteIntegrator: '<Root>/Discrete-Time Integrator'\n   *  Gain: '<Root>/Gain'\n   */\n  rtb_Sum1_i = 1000.0 * rtb_phi + localDW->DiscreteTimeIntegrator_DSTATE;\n\n  /* DataTypeConversion: '<Root>/ToUint16' incorporates:\n   *  Sum: '<Root>/Sum6'\n   */\n  tmp = rtb_Sum1_i + rtb_Sum7;\n  if (tmp < 65536.0) {\n    if (tmp >= 0.0) {\n      *rty_Motor_1 = (uint16_T)tmp;\n    } else {\n      *rty_Motor_1 = 0U;\n    }\n  } else {\n    *rty_Motor_1 = MAX_uint16_T;\n  }\n\n  /* End of DataTypeConversion: '<Root>/ToUint16' */\n\n  /* DataTypeConversion: '<Root>/ToUint16_1' */\n  if (rtb_Sum1_i < 65536.0) {\n    if (rtb_Sum1_i >= 0.0) {\n      *rty_Motor_2 = (uint16_T)rtb_Sum1_i;\n    } else {\n      *rty_Motor_2 = 0U;\n    }\n  } else {\n    *rty_Motor_2 = MAX_uint16_T;\n  }\n\n  /* End of DataTypeConversion: '<Root>/ToUint16_1' */\n\n  /* DataTypeConversion: '<Root>/ToUint16_3' */\n  if (rtb_Sum7 < 65536.0) {\n    if (rtb_Sum7 >= 0.0) {\n      *rty_Motor_4 = (uint16_T)rtb_Sum7;\n    } else {\n      *rty_Motor_4 = 0U;\n    }\n  } else {\n    *rty_Motor_4 = MAX_uint16_T;\n  }\n\n  /* End of DataTypeConversion: '<Root>/ToUint16_3' */\n\n  /* Update for DiscreteIntegrator: '<Root>/Discrete-Time Integrator' */\n  localDW->DiscreteTimeIntegrator_DSTATE += 0.001 * rtb_phi;\n\n  /* Update for Delay: '<S2>/Delay' */\n  localDW->Delay_DSTATE[0] = rtb_Gain_o_idx_0;\n  localDW->Delay_DSTATE[1] = rtb_Sum1_idx_1;\n\n  /* Update for DiscreteIntegrator: '<S1>/Discrete-Time Integrator1' */\n  localDW->DiscreteTimeIntegrator1_DSTATE += 0.001 * rtb_Gain_o_idx_1;\n}\n\n/*\n * File trailer for generated code.\n *\n * [EOF]\n */\n"},{"name":"crazyflie.h","type":"header","group":"model","path":"/home/bober2/Desktop/school/SSY191/project2024-group22/generate_code/simulink-model/slprj/ert/crazyflie","tag":"","groupDisplay":"Model files","code":"/*\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * File: crazyflie.h\n *\n * Code generated for Simulink model 'crazyflie'.\n *\n * Model version                  : 5.9\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\n * C/C++ source code generated on : Fri Apr  5 14:23:45 2024\n *\n * Target selection: ert.tlc\n * Embedded hardware selection: ARM Compatible->ARM Cortex\n * Code generation objectives:\n *    1. Execution efficiency\n *    2. RAM efficiency\n * Validation result: Not run\n */\n\n#ifndef RTW_HEADER_crazyflie_h_\n#define RTW_HEADER_crazyflie_h_\n#include <math.h>\n#ifndef crazyflie_COMMON_INCLUDES_\n#define crazyflie_COMMON_INCLUDES_\n#include \"rtwtypes.h\"\n#endif                                 /* crazyflie_COMMON_INCLUDES_ */\n\n/* Model Code Variants */\n\n/* Block signals and states (default storage) for model 'crazyflie' */\ntypedef struct {\n  real_T Delay_DSTATE[2];              /* '<S2>/Delay' */\n  real_T DiscreteTimeIntegrator_DSTATE;/* '<Root>/Discrete-Time Integrator' */\n  real_T DiscreteTimeIntegrator1_DSTATE;/* '<S1>/Discrete-Time Integrator1' */\n} DW_crazyflie_f_T;\n\ntypedef struct {\n  DW_crazyflie_f_T rtdw;\n} MdlrefDW_crazyflie_T;\n\nextern void crazyflie(const real_T *rtu_Ref_Roll, const real_T *rtu_Ref_Pitch,\n                      const real_T *rtu_Acc_x, const real_T *rtu_Acc_y, const\n                      real_T *rtu_Acc_z, const real_T *rtu_Gyro_x, const real_T *\n                      rtu_Gyro_y, uint16_T *rty_Motor_1, uint16_T *rty_Motor_2,\n                      uint16_T *rty_Motor_4, DW_crazyflie_f_T *localDW);\n\n/*-\n * These blocks were eliminated from the model due to optimizations:\n *\n * Block '<S2>/Discrete-Time Integrator' : Unused code path elimination\n * Block '<S2>/Scope' : Unused code path elimination\n * Block '<S2>/Scope1' : Unused code path elimination\n * Block '<S2>/Scope2' : Unused code path elimination\n * Block '<S3>/Scope' : Unused code path elimination\n * Block '<S1>/Gain6' : Eliminated nontunable gain of 1\n */\n\n/*-\n * The generated code includes comments that allow you to trace directly\n * back to the appropriate location in the model.  The basic format\n * is <system>/block_name, where system is the system number (uniquely\n * assigned by Simulink) and block_name is the name of the block.\n *\n * Use the MATLAB hilite_system command to trace the generated code back\n * to the model.  For example,\n *\n * hilite_system('<S3>')    - opens system 3\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\n *\n * Here is the system hierarchy for this model\n *\n * '<Root>' : 'crazyflie'\n * '<S1>'   : 'crazyflie/Subsystem'\n * '<S2>'   : 'crazyflie/Subsystem1'\n * '<S3>'   : 'crazyflie/Subsystem1/Subsystem'\n * '<S4>'   : 'crazyflie/Subsystem1/Subsystem/MATLAB Function'\n * '<S5>'   : 'crazyflie/Subsystem1/Subsystem/MATLAB Function1'\n */\n#endif                                 /* RTW_HEADER_crazyflie_h_ */\n\n/*\n * File trailer for generated code.\n *\n * [EOF]\n */\n"},{"name":"rtwtypes.h","type":"header","group":"sharedutility","path":"/home/bober2/Desktop/school/SSY191/project2024-group22/generate_code/simulink-model/slprj/ert/_sharedutils","tag":"","groupDisplay":"Shared files","code":"/*\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * File: rtwtypes.h\n *\n * Code generated for Simulink model 'crazyflie'.\n *\n * Model version                  : 5.9\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\n * C/C++ source code generated on : Fri Apr  5 14:17:53 2024\n */\n\n#ifndef RTWTYPES_H\n#define RTWTYPES_H\n\n/* Logical type definitions */\n#if (!defined(__cplusplus))\n#ifndef false\n#define false                          (0U)\n#endif\n\n#ifndef true\n#define true                           (1U)\n#endif\n#endif\n\n/*=======================================================================*\n * Target hardware information\n *   Device type: ARM Compatible->ARM Cortex\n *   Number of bits:     char:   8    short:   16    int:  32\n *                       long:  32\n *                       native word size:  32\n *   Byte ordering: LittleEndian\n *   Signed integer division rounds to: Zero\n *   Shift right on a signed integer as arithmetic shift: on\n *=======================================================================*/\n\n/*=======================================================================*\n * Fixed width word size data types:                                     *\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\n *=======================================================================*/\ntypedef signed char int8_T;\ntypedef unsigned char uint8_T;\ntypedef short int16_T;\ntypedef unsigned short uint16_T;\ntypedef int int32_T;\ntypedef unsigned int uint32_T;\ntypedef float real32_T;\ntypedef double real64_T;\n\n/*===========================================================================*\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\n *                           real_T, time_T, ulong_T.                        *\n *===========================================================================*/\ntypedef double real_T;\ntypedef double time_T;\ntypedef unsigned char boolean_T;\ntypedef int int_T;\ntypedef unsigned int uint_T;\ntypedef unsigned long ulong_T;\ntypedef char char_T;\ntypedef unsigned char uchar_T;\ntypedef char_T byte_T;\n\n/*=======================================================================*\n * Min and Max:                                                          *\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\n *=======================================================================*/\n#define MAX_int8_T                     ((int8_T)(127))\n#define MIN_int8_T                     ((int8_T)(-128))\n#define MAX_uint8_T                    ((uint8_T)(255U))\n#define MAX_int16_T                    ((int16_T)(32767))\n#define MIN_int16_T                    ((int16_T)(-32768))\n#define MAX_uint16_T                   ((uint16_T)(65535U))\n#define MAX_int32_T                    ((int32_T)(2147483647))\n#define MIN_int32_T                    ((int32_T)(-2147483647-1))\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFU))\n\n/* Block D-Work pointer type */\ntypedef void * pointer_T;\n\n#endif                                 /* RTWTYPES_H */\n\n/*\n * File trailer for generated code.\n *\n * [EOF]\n */\n"},{"name":"crazyflieModel.c","type":"source","group":"","path":"/home/bober2/Desktop/school/SSY191/project2024-group22/generate_code/simulink-model/slprj/ert/crazyflie","tag":"","groupDisplay":"Other files","code":"/*\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * File: crazyflieModel.c\n *\n * Code generated for Simulink model 'crazyflie'.\n *\n * Model version                  : 5.9\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\n * C/C++ source code generated on : Fri Apr  5 14:23:45 2024\n *\n * Target selection: ert.tlc\n * Embedded hardware selection: ARM Compatible->ARM Cortex\n * Code generation objectives:\n *    1. Execution efficiency\n *    2. RAM efficiency\n * Validation result: Not run\n */\n\n#define DEBUG_MODULE                   \"STAB\"\n#include <math.h>\n#include \"FreeRTOS.h\"\n#include \"task.h\"\n#include \"system.h\"\n#include \"log.h\"\n#include \"param.h\"\n#include \"debug.h\"\n#include \"motors.h\"\n#include \"pm.h\"\n#include \"crazyflie.h\"\n#include \"crazyflieModel.h\"\n#include \"sensors.h\"\n#include \"commander.h\"\n#include \"crtp_commander_high_level.h\"\n#include \"crtp_localization_service.h\"\n#include \"controller.h\"\n#include \"power_distribution.h\"\n#include \"collision_avoidance.h\"\n#include \"health.h\"\n#include \"supervisor.h\"\n#include \"estimator.h\"\n#include \"usddeck.h\"\n#include \"quatcompress.h\"\n#include \"statsCnt.h\"\n#include \"static_mem.h\"\n#include \"rateSupervisor.h\"\n\nstatic bool isInit;\nstatic bool emergencyStop = false;\nstatic int emergencyStopTimeout = EMERGENCY_STOP_TIMEOUT_DISABLED;\nstatic uint32_t inToOutLatency;\n\n// State variables for the stabilizer\nstatic setpoint_t setpoint;\nstatic sensorData_t sensorData;\nstatic state_t state;\nstatic control_t control;\n\n// For scratch storage - never logged or passed to other subsystems.\n//static setpoint_t tempSetpoint;\nstatic StateEstimatorType estimatorType;\nstatic ControllerType controllerType;\nstatic STATS_CNT_RATE_DEFINE(stabilizerRate, 500);\nstatic rateSupervisor_t rateSupervisorContext;\nstatic bool rateWarningDisplayed = false;\n\n// SSY191\nstatic float l1, l2, l3, l4, l5, l6;\nstatic uint16_t m1, m2, m3, m4;\nSTATIC_MEM_TASK_ALLOC(crazyflieModelTask, CRAZYFLIEMODEL_TASK_STACKSIZE);\nstatic void crazyflieModelTask(void* param);\nstatic void calcSensorToOutputLatency(const sensorData_t *sensorData)\n{\n  uint64_t outTimestamp = usecTimestamp();\n  inToOutLatency = outTimestamp - sensorData->interruptTimestamp;\n}\n\nvoid crazyflieModelInit(StateEstimatorType estimator)\n{\n  if (isInit)\n    return;\n  ();\n  sensorsInit();\n  stateEstimatorInit(estimator);\n  controllerInit(ControllerTypeAny);\n  powerDistributionInit();\n  collisionAvoidanceInit();\n  estimatorType = getStateEstimator();\n  controllerType = getControllerType();\n  ();\n  STATIC_MEM_TASK_CREATE(crazyflieModelTask, crazyflieModelTask,\n    CRAZYFLIEMODEL_TASK_NAME, NULL, CRAZYFLIEMODEL_TASK_PRI);\n  isInit = true;\n}\n\nbool crazyflieModelTest(void)\n{\n  bool pass = true;\n  pass &= sensorsTest();\n  pass &= stateEstimatorTest();\n  pass &= controllerTest();\n  pass &= powerDistributionTest();\n  pass &= collisionAvoidanceTest();\n  return pass;\n}\n\nstatic void checkEmergencyStopTimeout()\n{\n  if (emergencyStopTimeout >= 0) {\n    emergencyStopTimeout -= 1;\n    if (emergencyStopTimeout == 0) {\n      emergencyStop = true;\n    }\n  }\n}\n\n/* The stabilizer loop runs at 1kHz (stock) or 500Hz (kalman). It is the\n * responsibility of the different functions to run slower by skipping call\n * (ie. returning without modifying the output structure).\n */\nstatic void crazyflieModelTask(void* param)\n{\n  uint32_t tick;\n  uint32_t lastWakeTime;\n  vTaskSetApplicationTaskTag(0, (void*)TASK_STABILIZER_ID_NBR);\n\n  //Wait for the system to be fully started to start stabilization loop\n  systemWaitStart();\n  DEBUG_PRINT(\"Wait for sensor calibration...\\n\");\n\n  // Wait for sensors to be calibrated\n  lastWakeTime = xTaskGetTickCount();\n  while (!sensorsAreCalibrated()) {\n    vTaskDelayUntil(&lastWakeTime, F2T(RATE_MAIN_LOOP));\n  }\n\n  // Initialize tick to something else then 0\n  tick = 1;\n  rateSupervisorInit(&rateSupervisorContext, xTaskGetTickCount(), M2T(1000), 997,\n                     1003, 1);\n  DEBUG_PRINT(\"Ready to fly.\\n\");\n  while (1) {\n    // The sensor should unlock at 1kHz\n    sensorsWaitDataReady();\n\n    // update sensorData struct (for logging variables)\n    sensorsAcquire(&sensorData, tick);\n    if (healthShallWeRunTest()) {\n      healthRunTests(&sensorData);\n    } else {\n      stateEstimator(&state, tick);\n      commanderGetSetpoint(&setpoint, &state);\n      crazyflie_U.Acc_x = sensorData.acc.x;\n      crazyflie_U.Acc_y = sensorData.acc.y;\n      crazyflie_U.Acc_z = sensorData.acc.z;\n      crazyflie_U.Gyro_x = sensorData.gyro.x;\n      crazyflie_U.Gyro_y = sensorData.gyro.y;\n      crazyflie_U.Gyro_z = sensorData.gyro.z;\n      crazyflie_U.Base_Thrust = setpoint.thrust;\n      crazyflie_U.Ref_Roll = setpoint.attitude.roll;\n      crazyflie_U.Ref_Pitch = setpoint.attitude.pitch;\n      crazyflie_U.Ref_YawRate = setpoint.attitudeRate.yaw;\n\n      //DEBUG_PRINT(\"Acc Y: %f\\n\", sensorData.acc.y);\n      crazyflie();\n\n      /* Get model outputs here */\n      l1 = crazyflie_Y.Log1;\n      l2 = crazyflie_Y.Log2;\n      l3 = crazyflie_Y.Log3;\n      l4 = crazyflie_Y.Log4;\n      l5 = crazyflie_Y.Log5;\n      l6 = crazyflie_Y.Log6;\n      m1 = (uint16_t)crazyflie_Y.Motor_1;\n      m2 = (uint16_t)crazyflie_Y.Motor_2;\n      m3 = (uint16_t)crazyflie_Y.Motor_3;\n      m4 = (uint16_t)crazyflie_Y.Motor_4;\n      checkEmergencyStopTimeout();\n\n      //\n      // The supervisor module keeps track of Crazyflie state such as if\n      // we are ok to fly, or if the Crazyflie is in flight.\n      //\n      supervisorUpdate(&sensorData);\n      if (emergencyStop || (systemIsArmed() == false)) {\n        powerStop();\n      } else {\n        motorsSetRatio(MOTOR_M1, m1);\n        motorsSetRatio(MOTOR_M2, m2);\n        motorsSetRatio(MOTOR_M3, m3);\n        motorsSetRatio(MOTOR_M4, m4);\n      }\n\n#ifdef CONFIG_DECK_USD\n\n      // Log data to uSD card if configured\n      if (usddeckLoggingEnabled()\n          && usddeckLoggingMode() == usddeckLoggingMode_SynchronousStabilizer\n          && RATE_DO_EXECUTE(usddeckFrequency(), tick)) {\n        usddeckTriggerLogging();\n      }\n\n#endif\n\n      calcSensorToOutputLatency(&sensorData);\n      tick++;\n      STATS_CNT_RATE_EVENT(&stabilizerRate);\n      if (!rateSupervisorValidate(&rateSupervisorContext, xTaskGetTickCount()))\n      {\n        if (!rateWarningDisplayed) {\n          DEBUG_PRINT(\"WARNING: stabilizer loop rate is off (%lu)\\n\",\n                      rateSupervisorLatestCount(&rateSupervisorContext));\n          rateWarningDisplayed = true;\n        }\n      }\n    }\n  }\n}\n\nvoid stabilizerSetEmergencyStop()\n{\n  emergencyStop = true;\n}\n\nvoid stabilizerResetEmergencyStop()\n{\n  emergencyStop = false;\n}\n\nvoid stabilizerSetEmergencyStopTimeout(int timeout)\n{\n  emergencyStop = false;\n  emergencyStopTimeout = timeout;\n}\n\n/**\n * Parameters to set the estimator and controller type\n * for the stabilizer module, or to do an emergency stop\n */\nPARAM_GROUP_START(stabilizer)\n/**\n * @brief Estimator type Any(0), complementary(1), kalman(2) (Default: 0)\n */\n  PARAM_ADD_CORE(PARAM_UINT8, estimator, &estimatorType)\n/**\n * @brief Controller type Any(0), PID(1), Mellinger(2), INDI(3) (Default: 0)\n */\n  PARAM_ADD_CORE(PARAM_UINT8, controller, &controllerType)\n/**\n * @brief If set to nonzero will turn off power\n */\n  PARAM_ADD_CORE(PARAM_UINT8, stop, &emergencyStop)\n  PARAM_GROUP_STOP(stabilizer)\n/**\n * Log group for the current controller target\n *\n * Note: all members may not be updated depending on how the system is used\n */\n  LOG_GROUP_START(ctrltarget)\n/**\n * @brief Desired position X [m]\n */\n  LOG_ADD_CORE(LOG_FLOAT, x, &setpoint.position.x)\n/**\n * @brief Desired position Y [m]\n */\n  LOG_ADD_CORE(LOG_FLOAT, y, &setpoint.position.y)\n/**\n * @brief Desired position X [m]\n */\n  LOG_ADD_CORE(LOG_FLOAT, z, &setpoint.position.z)\n/**\n * @brief Desired velocity X [m/s]\n */\n  LOG_ADD_CORE(LOG_FLOAT, vx, &setpoint.velocity.x)\n/**\n * @brief Desired velocity Y [m/s]\n */\n  LOG_ADD_CORE(LOG_FLOAT, vy, &setpoint.velocity.y)\n/**\n * @brief Desired velocity Z [m/s]\n */\n  LOG_ADD_CORE(LOG_FLOAT, vz, &setpoint.velocity.z)\n/**\n * @brief Desired acceleration X [m/s^2]\n */\n  LOG_ADD_CORE(LOG_FLOAT, ax, &setpoint.acceleration.x)\n/**\n * @brief Desired acceleration Y [m/s^2]\n */\n  LOG_ADD_CORE(LOG_FLOAT, ay, &setpoint.acceleration.y)\n/**\n * @brief Desired acceleration Z [m/s^2]\n */\n  LOG_ADD_CORE(LOG_FLOAT, az, &setpoint.acceleration.z)\n/**\n * @brief Desired attitude, roll [deg]\n */\n  LOG_ADD_CORE(LOG_FLOAT, roll, &setpoint.attitude.roll)\n/**\n * @brief Desired attitude, pitch [deg]\n */\n  LOG_ADD_CORE(LOG_FLOAT, pitch, &setpoint.attitude.pitch)\n/**\n * @brief Desired attitude rate, yaw rate [deg/s]\n */\n  LOG_ADD_CORE(LOG_FLOAT, yaw, &setpoint.attitudeRate.yaw)\n  LOG_GROUP_STOP(ctrltarget)\n/**\n * Logs to set the estimator and controller type\n * for the stabilizer module\n */\n  LOG_GROUP_START(stabilizer)\n/**\n * @brief Estimated roll\n *   Note: Same as stateEstimate.roll\n */\n  LOG_ADD(LOG_FLOAT, roll, &state.attitude.roll)\n/**\n * @brief Estimated pitch\n *   Note: Same as stateEstimate.pitch\n */\n  LOG_ADD(LOG_FLOAT, pitch, &state.attitude.pitch)\n/**\n * @brief Estimated yaw\n *   Note: same as stateEstimate.yaw\n */\n  LOG_ADD(LOG_FLOAT, yaw, &state.attitude.yaw)\n/**\n * @brief Current thrust\n */\n  LOG_ADD(LOG_FLOAT, thrust, &control.thrust)\n/**\n * @brief Rate of stabilizer loop\n */\n  STATS_CNT_RATE_LOG_ADD(rtStab, &stabilizerRate)\n/**\n * @brief Latency from sampling of sensor to motor output\n *    Note: Used for debugging but could also be used as a system test\n */\n  LOG_ADD(LOG_UINT32, intToOut, &inToOutLatency)\n  LOG_GROUP_STOP(stabilizer)\n/**\n * Log group for accelerometer sensor measurement, based on body frame.\n * Compensated for a miss-alignment by gravity at startup.\n *\n * For data on measurement noise please see information from the sensor\n * manufacturer. To see what accelerometer sensor is in your Crazyflie or Bolt\n * please check documentation on the Bitcraze webpage or check the parameter\n * group `imu_sensors`.\n */\n  LOG_GROUP_START(acc)\n/**\n * @brief Acceleration in X [Gs]\n */\n  LOG_ADD_CORE(LOG_FLOAT, x, &sensorData.acc.x)\n/**\n * @brief Acceleration in Y [Gs]\n */\n  LOG_ADD_CORE(LOG_FLOAT, y, &sensorData.acc.y)\n/**\n * @brief Acceleration in Z [Gs]\n */\n  LOG_ADD_CORE(LOG_FLOAT, z, &sensorData.acc.z)\n  LOG_GROUP_STOP(acc)\n#ifdef LOG_SEC_IMU\n  LOG_GROUP_START(accSec)\n  LOG_ADD(LOG_FLOAT, x, &sensorData.accSec.x)\n  LOG_ADD(LOG_FLOAT, y, &sensorData.accSec.y)\n  LOG_ADD(LOG_FLOAT, z, &sensorData.accSec.z)\n  LOG_GROUP_STOP(accSec)\n#endif\n/**\n * Log group for the barometer.\n *\n * For data on measurement noise please see information from the sensor\n * manufacturer. To see what barometer sensor is in your Crazyflie or Bolt\n * please check documentation on the Bitcraze webpage or check the parameter\n * group `imu_sensors`.\n */\n  LOG_GROUP_START(baro)\n/**\n * @brief Altitude above Sea Level [m]\n */\n  LOG_ADD_CORE(LOG_FLOAT, asl, &sensorData.baro.asl)\n/**\n * @brief Temperature [degrees Celsius]\n */\n  LOG_ADD(LOG_FLOAT, temp, &sensorData.baro.temperature)\n/**\n * @brief Air preassure [mbar]\n */\n  LOG_ADD_CORE(LOG_FLOAT, pressure, &sensorData.baro.pressure)\n  LOG_GROUP_STOP(baro)\n/**\n * Log group for gyroscopes.\n *\n * For data on measurement noise please see information from the sensor\n * manufacturer. To see what gyroscope sensor is in your Crazyflie or Bolt\n * please check documentation on the Bitcraze webpage or check the parameter\n * group `imu_sensors`.\n */\n  LOG_GROUP_START(gyro)\n/**\n * @brief Angular velocity (rotation) around the X-axis, after filtering [deg/s]\n */\n  LOG_ADD_CORE(LOG_FLOAT, x, &sensorData.gyro.x)\n/**\n * @brief Angular velocity (rotation) around the Y-axis, after filtering [deg/s]\n */\n  LOG_ADD_CORE(LOG_FLOAT, y, &sensorData.gyro.y)\n/**\n * @brief Angular velocity (rotation) around the Z-axis, after filtering [deg/s]\n */\n  LOG_ADD_CORE(LOG_FLOAT, z, &sensorData.gyro.z)\n  LOG_GROUP_STOP(gyro)\n#ifdef LOG_SEC_IMU\n  LOG_GROUP_START(gyroSec)\n  LOG_ADD(LOG_FLOAT, x, &sensorData.gyroSec.x)\n  LOG_ADD(LOG_FLOAT, y, &sensorData.gyroSec.y)\n  LOG_ADD(LOG_FLOAT, z, &sensorData.gyroSec.z)\n  LOG_GROUP_STOP(gyroSec)\n#endif\n/**\n * Log group for magnetometer.\n *\n * Currently only present on Crazyflie 2.0\n */\n  LOG_GROUP_START(mag)\n/**\n * @brief Magnetometer X axis, after filtering [gauss]\n */\n  LOG_ADD_CORE(LOG_FLOAT, x, &sensorData.mag.x)\n/**\n * @brief Magnetometer Y axis, after filtering [gauss]\n */\n  LOG_ADD_CORE(LOG_FLOAT, y, &sensorData.mag.y)\n/**\n * @brief Magnetometer Z axis, after filtering [gauss]\n */\n  LOG_ADD_CORE(LOG_FLOAT, z, &sensorData.mag.z)\n  LOG_GROUP_STOP(mag)\n  LOG_GROUP_START(controller)\n  LOG_ADD(LOG_INT16, ctr_yaw, &control.yaw)\n  LOG_GROUP_STOP(controller)\n/**\n * Log group for the state estimator, the currently estimated state of the platform.\n *\n * Note: all values may not be updated depending on which estimator that is used.\n */\n  LOG_GROUP_START(stateEstimate)\n/**\n * @brief The estimated position of the platform in the global reference frame, X [m]\n */\n  LOG_ADD_CORE(LOG_FLOAT, x, &state.position.x)\n/**\n * @brief The estimated position of the platform in the global reference frame, Y [m]\n */\n  LOG_ADD_CORE(LOG_FLOAT, y, &state.position.y)\n/**\n * @brief The estimated position of the platform in the global reference frame, Z [m]\n */\n  LOG_ADD_CORE(LOG_FLOAT, z, &state.position.z)\n/**\n * @brief The velocity of the Crazyflie in the global reference frame, X [m/s]\n */\n  LOG_ADD_CORE(LOG_FLOAT, vx, &state.velocity.x)\n/**\n * @brief The velocity of the Crazyflie in the global reference frame, Y [m/s]\n */\n  LOG_ADD_CORE(LOG_FLOAT, vy, &state.velocity.y)\n/**\n * @brief The velocity of the Crazyflie in the global reference frame, Z [m/s]\n */\n  LOG_ADD_CORE(LOG_FLOAT, vz, &state.velocity.z)\n/**\n * @brief The acceleration of the Crazyflie in the global reference frame, X [Gs]\n */\n  LOG_ADD_CORE(LOG_FLOAT, ax, &state.acc.x)\n/**\n * @brief The acceleration of the Crazyflie in the global reference frame, Y [Gs]\n */\n  LOG_ADD_CORE(LOG_FLOAT, ay, &state.acc.y)\n/**\n * @brief The acceleration of the Crazyflie in the global reference frame, without considering gravity, Z [Gs]\n */\n  LOG_ADD_CORE(LOG_FLOAT, az, &state.acc.z)\n/**\n * @brief Attitude, roll angle [deg]\n */\n  LOG_ADD_CORE(LOG_FLOAT, roll, &state.attitude.roll)\n/**\n * @brief Attitude, pitch angle (legacy CF2 body coordinate system, where pitch is inverted) [deg]\n */\n  LOG_ADD_CORE(LOG_FLOAT, pitch, &state.attitude.pitch)\n/**\n * @brief Attitude, yaw angle [deg]\n */\n  LOG_ADD_CORE(LOG_FLOAT, yaw, &state.attitude.yaw)\n/**\n * @brief Attitude as a quaternion, x\n */\n  LOG_ADD_CORE(LOG_FLOAT, qx, &state.attitudeQuaternion.x)\n/**\n * @brief Attitude as a quaternion, y\n */\n  LOG_ADD_CORE(LOG_FLOAT, qy, &state.attitudeQuaternion.y)\n/**\n * @brief Attitude as a quaternion, z\n */\n  LOG_ADD_CORE(LOG_FLOAT, qz, &state.attitudeQuaternion.z)\n/**\n * @brief Attitude as a quaternion, w\n */\n  LOG_ADD_CORE(LOG_FLOAT, qw, &state.attitudeQuaternion.w)\n  LOG_GROUP_STOP(stateEstimate)\n/* SSY191: Add Simulink plots\n */\n  LOG_GROUP_START(simulink)\n  LOG_ADD(LOG_FLOAT, log_1, &l1)\n  LOG_ADD(LOG_FLOAT, log_2, &l2)\n  LOG_ADD(LOG_FLOAT, log_3, &l3)\n  LOG_ADD(LOG_FLOAT, log_4, &l4)\n  LOG_ADD(LOG_FLOAT, log_5, &l5)\n  LOG_ADD(LOG_FLOAT, log_6, &l6)\n  LOG_GROUP_STOP(simulink)\n/*\n * File trailer for generated code.\n *\n * [EOF]\n */\n"},{"name":"crazyflieModel.h","type":"header","group":"","path":"/home/bober2/Desktop/school/SSY191/project2024-group22/generate_code/simulink-model/slprj/ert/crazyflie","tag":"","groupDisplay":"Other files","code":"/*\n * Academic License - for use in teaching, academic research, and meeting\n * course requirements at degree granting institutions only.  Not for\n * government, commercial, or other organizational use.\n *\n * File: crazyflieModel.h\n *\n * Code generated for Simulink model 'crazyflie'.\n *\n * Model version                  : 5.9\n * Simulink Coder version         : 9.6 (R2021b) 14-May-2021\n * C/C++ source code generated on : Fri Apr  5 14:23:45 2024\n *\n * Target selection: ert.tlc\n * Embedded hardware selection: ARM Compatible->ARM Cortex\n * Code generation objectives:\n *    1. Execution efficiency\n *    2. RAM efficiency\n * Validation result: Not run\n */\n\n#ifndef RTW_HEADER_crazyflieModel_h_\n#define RTW_HEADER_crazyflieModel_h_\n#include <stdbool.h>\n#include <stdint.h>\n#define EMERGENCY_STOP_TIMEOUT_DISABLED (-1)\n\nvoid crazyflieModelInit(StateEstimatorType estimator);\nbool crazyflieModelTest(void);\n\n#endif                                 /* RTW_HEADER_crazyflieModel_h_ */\n\n/*\n * File trailer for generated code.\n *\n * [EOF]\n */\n"}],"trace":"{\"model\":\"crazyflie\",\"sources\":[\"crazyflie.c\",\"crazyflie.h\"],\"categoricalProps\":[\"ModelElemCategory\",\"StorageClass\"],\"categoricalValues\":[\"InternalData\",\"Default\"],\"sidPrefixes\":[\"crazyflie\"],\"fileRecords\":{\"0\":{\"records\":[{\"tk\":[42,3,42,11],\"els\":[\"0:437#out:1\"]},{\"tk\":[42,12,42,13],\"els\":[\"0:296\",\"0:296::25\"]},{\"tk\":[42,14,42,15],\"els\":[\"0:296\",\"0:296::25\"]},{\"tk\":[43,3,43,13],\"els\":[\"0:372#out:1\"]},{\"tk\":[43,14,43,15],\"els\":[\"0:296\",\"0:296::25\"]},{\"tk\":[43,16,43,17],\"els\":[\"0:296\",\"0:296::25\"]},{\"tk\":[49,3,49,17],\"els\":[\"0:322\"]},{\"tk\":[49,18,49,19],\"els\":[\"0:297:68-73\",\"0:297\",\"0:297::25\"]},{\"tk\":[49,20,49,21],\"els\":[\"0:297:68-73\",\"0:297\",\"0:297::25\"]},{\"tk\":[49,21,49,22],\"els\":[\"0:297\",\"0:297::25\"]},{\"tk\":[50,3,50,10],\"els\":[\"0:296::25#out:2\"]},{\"tk\":[50,11,50,12],\"els\":[\"0:297:74-97\",\"0:297\",\"0:297::25\"]},{\"tk\":[50,13,50,17],\"els\":[\"0:297:74-97\",\"0:297\",\"0:297::25\"]},{\"tk\":[50,18,50,19],\"els\":[\"0:297\",\"0:297::25\"]},{\"tk\":[50,29,50,30],\"els\":[\"0:297:79-87\",\"0:297\",\"0:297::25\"]},{\"tk\":[50,31,50,32],\"els\":[\"0:297\",\"0:297::25\"]},{\"tk\":[50,42,50,43],\"els\":[\"0:297:79-96\",\"0:297\",\"0:297::25\"]},{\"tk\":[50,44,50,45],\"els\":[\"0:297\",\"0:297::25\"]},{\"tk\":[50,55,50,56],\"els\":[\"0:297:88-96\",\"0:297\",\"0:297::25\"]},{\"tk\":[50,57,50,58],\"els\":[\"0:297\",\"0:297::25\"]},{\"tk\":[53,3,53,19],\"els\":[\"0:400\"]},{\"tk\":[53,20,53,21],\"els\":[\"0:400\"]},{\"tk\":[53,22,53,25],\"els\":[\"0:400\"]},{\"tk\":[53,26,53,27],\"els\":[\"0:400\"]},{\"tk\":[53,28,53,29],\"els\":[\"0:400\"]},{\"tk\":[54,3,54,19],\"els\":[\"0:400\"]},{\"tk\":[54,20,54,21],\"els\":[\"0:400\"]},{\"tk\":[54,22,54,25],\"els\":[\"0:400\"]},{\"tk\":[54,26,54,27],\"els\":[\"0:400\"]},{\"tk\":[54,28,54,29],\"els\":[\"0:400\"]},{\"tk\":[66,3,66,19],\"els\":[\"0:400\"]},{\"tk\":[66,20,66,21],\"els\":[\"0:322\"]},{\"tk\":[66,22,66,40],\"els\":[\"0:318\"]},{\"tk\":[66,41,66,42],\"els\":[\"0:318\"]},{\"tk\":[66,43,66,48],\"els\":[\"0:296:36-52\",\"0:296\",\"0:296::25\"]},{\"tk\":[66,49,66,57],\"els\":[\"0:437#out:1\"]},{\"tk\":[66,59,66,69],\"els\":[\"0:372#out:1\"]},{\"tk\":[66,71,66,72],\"els\":[\"0:405\"]},{\"tk\":[66,73,66,76],\"els\":[\"0:405\"]},{\"tk\":[66,77,66,78],\"els\":[\"0:322\"]},{\"tk\":[67,6,67,22],\"els\":[\"0:400\"]},{\"tk\":[67,23,67,24],\"els\":[\"0:406\"]},{\"tk\":[67,34,67,46],\"els\":[\"0:402\"]},{\"tk\":[67,46,67,47],\"els\":[\"0:402\"]},{\"tk\":[67,47,67,48],\"els\":[\"0:402\"]},{\"tk\":[67,51,67,52],\"els\":[\"0:404\"]},{\"tk\":[67,53,67,56],\"els\":[\"0:404\"]},{\"tk\":[68,3,68,17],\"els\":[\"0:322\"]},{\"tk\":[68,18,68,19],\"els\":[\"0:322\"]},{\"tk\":[68,20,68,38],\"els\":[\"0:319\"]},{\"tk\":[68,39,68,40],\"els\":[\"0:319\"]},{\"tk\":[68,41,68,46],\"els\":[\"0:297:62-98\",\"0:297\",\"0:297::25\"]},{\"tk\":[68,47,68,61],\"els\":[\"0:322\"]},{\"tk\":[68,63,68,70],\"els\":[\"0:296::25#out:2\"]},{\"tk\":[68,72,68,73],\"els\":[\"0:405\"]},{\"tk\":[68,74,68,77],\"els\":[\"0:405\"]},{\"tk\":[68,78,68,79],\"els\":[\"0:322\"]},{\"tk\":[69,6,69,22],\"els\":[\"0:400\"]},{\"tk\":[69,23,69,24],\"els\":[\"0:406\"]},{\"tk\":[69,34,69,46],\"els\":[\"0:402\"]},{\"tk\":[69,46,69,47],\"els\":[\"0:402\"]},{\"tk\":[69,47,69,48],\"els\":[\"0:402\"]},{\"tk\":[69,51,69,52],\"els\":[\"0:404\"]},{\"tk\":[69,53,69,56],\"els\":[\"0:404\"]},{\"tk\":[72,3,72,10],\"els\":[\"0:296::25#out:2\"]},{\"tk\":[72,11,72,12],\"els\":[\"0:368\"]},{\"tk\":[72,13,72,14],\"els\":[\"0:368\"]},{\"tk\":[72,27,72,28],\"els\":[\"0:368\"]},{\"tk\":[72,29,72,45],\"els\":[\"0:400\"]},{\"tk\":[75,3,75,19],\"els\":[\"0:400\"]},{\"tk\":[75,20,75,21],\"els\":[\"0:436\"]},{\"tk\":[75,22,75,23],\"els\":[\"0:436\"]},{\"tk\":[75,37,75,38],\"els\":[\"0:436\"]},{\"tk\":[75,39,75,53],\"els\":[\"0:322\"]},{\"tk\":[80,3,80,11],\"els\":[\"0:437#out:1\"]},{\"tk\":[80,12,80,13],\"els\":[\"0:437\"]},{\"tk\":[80,14,80,30],\"els\":[\"0:400\"]},{\"tk\":[80,31,80,32],\"els\":[\"0:437\"]},{\"tk\":[80,42,80,72],\"els\":[\"0:434\"]},{\"tk\":[86,3,86,13],\"els\":[\"0:372#out:1\"]},{\"tk\":[86,14,86,15],\"els\":[\"0:372\"]},{\"tk\":[86,16,86,22],\"els\":[\"0:369\"]},{\"tk\":[86,23,86,24],\"els\":[\"0:369\"]},{\"tk\":[86,25,86,32],\"els\":[\"0:296::25#out:2\"]},{\"tk\":[86,33,86,34],\"els\":[\"0:372\"]},{\"tk\":[86,44,86,73],\"els\":[\"0:371\"]},{\"tk\":[91,3,91,6],\"els\":[\"0:143\"]},{\"tk\":[91,7,91,8],\"els\":[\"0:143\"]},{\"tk\":[91,9,91,19],\"els\":[\"0:372#out:1\"]},{\"tk\":[91,20,91,21],\"els\":[\"0:442\"]},{\"tk\":[91,22,91,30],\"els\":[\"0:437#out:1\"]},{\"tk\":[92,3,92,5],\"els\":[\"0:143\"]},{\"tk\":[92,7,92,10],\"els\":[\"0:143\"]},{\"tk\":[92,11,92,12],\"els\":[\"0:143\"]},{\"tk\":[92,13,92,20],\"els\":[\"0:143\"]},{\"tk\":[93,5,93,7],\"els\":[\"0:143\"]},{\"tk\":[93,9,93,12],\"els\":[\"0:143\"]},{\"tk\":[93,13,93,15],\"els\":[\"0:143\"]},{\"tk\":[93,16,93,19],\"els\":[\"0:143\"]},{\"tk\":[94,20,94,21],\"els\":[\"0:143\"]},{\"tk\":[94,22,94,23],\"els\":[\"0:143\"]},{\"tk\":[94,32,94,35],\"els\":[\"0:143\"]},{\"tk\":[96,20,96,21],\"els\":[\"0:143\"]},{\"tk\":[96,22,96,24],\"els\":[\"0:143\"]},{\"tk\":[99,18,99,19],\"els\":[\"0:143\"]},{\"tk\":[99,20,99,32],\"els\":[\"0:143\"]},{\"tk\":[105,3,105,5],\"els\":[\"0:144\"]},{\"tk\":[105,7,105,17],\"els\":[\"0:372#out:1\"]},{\"tk\":[105,18,105,19],\"els\":[\"0:144\"]},{\"tk\":[105,20,105,27],\"els\":[\"0:144\"]},{\"tk\":[106,5,106,7],\"els\":[\"0:144\"]},{\"tk\":[106,9,106,19],\"els\":[\"0:372#out:1\"]},{\"tk\":[106,20,106,22],\"els\":[\"0:144\"]},{\"tk\":[106,23,106,26],\"els\":[\"0:144\"]},{\"tk\":[107,20,107,21],\"els\":[\"0:144\"]},{\"tk\":[107,22,107,23],\"els\":[\"0:144\"]},{\"tk\":[107,32,107,42],\"els\":[\"0:372#out:1\"]},{\"tk\":[109,20,109,21],\"els\":[\"0:144\"]},{\"tk\":[109,22,109,24],\"els\":[\"0:144\"]},{\"tk\":[112,18,112,19],\"els\":[\"0:144\"]},{\"tk\":[112,20,112,32],\"els\":[\"0:144\"]},{\"tk\":[118,3,118,5],\"els\":[\"0:146\"]},{\"tk\":[118,7,118,15],\"els\":[\"0:437#out:1\"]},{\"tk\":[118,16,118,17],\"els\":[\"0:146\"]},{\"tk\":[118,18,118,25],\"els\":[\"0:146\"]},{\"tk\":[119,5,119,7],\"els\":[\"0:146\"]},{\"tk\":[119,9,119,17],\"els\":[\"0:437#out:1\"]},{\"tk\":[119,18,119,20],\"els\":[\"0:146\"]},{\"tk\":[119,21,119,24],\"els\":[\"0:146\"]},{\"tk\":[120,20,120,21],\"els\":[\"0:146\"]},{\"tk\":[120,22,120,23],\"els\":[\"0:146\"]},{\"tk\":[120,32,120,40],\"els\":[\"0:437#out:1\"]},{\"tk\":[122,20,122,21],\"els\":[\"0:146\"]},{\"tk\":[122,22,122,24],\"els\":[\"0:146\"]},{\"tk\":[125,18,125,19],\"els\":[\"0:146\"]},{\"tk\":[125,20,125,32],\"els\":[\"0:146\"]},{\"tk\":[131,12,131,41],\"els\":[\"0:371\"]},{\"tk\":[131,42,131,44],\"els\":[\"0:371\"]},{\"tk\":[131,45,131,50],\"els\":[\"0:371\"]},{\"tk\":[131,51,131,52],\"els\":[\"0:371\"]},{\"tk\":[131,53,131,60],\"els\":[\"0:296::25#out:2\"]},{\"tk\":[134,12,134,24],\"els\":[\"0:402\"]},{\"tk\":[134,24,134,25],\"els\":[\"0:402\"]},{\"tk\":[134,25,134,26],\"els\":[\"0:402\"]},{\"tk\":[134,28,134,29],\"els\":[\"0:402\"]},{\"tk\":[134,30,134,46],\"els\":[\"0:400\"]},{\"tk\":[135,12,135,24],\"els\":[\"0:402\"]},{\"tk\":[135,24,135,25],\"els\":[\"0:402\"]},{\"tk\":[135,25,135,26],\"els\":[\"0:402\"]},{\"tk\":[135,28,135,29],\"els\":[\"0:402\"]},{\"tk\":[135,30,135,44],\"els\":[\"0:322\"]},{\"tk\":[138,12,138,42],\"els\":[\"0:434\"]},{\"tk\":[138,43,138,45],\"els\":[\"0:434\"]},{\"tk\":[138,46,138,51],\"els\":[\"0:434\"]},{\"tk\":[138,52,138,53],\"els\":[\"0:434\"]},{\"tk\":[138,54,138,70],\"els\":[\"0:400\"]}]},\"1\":{\"records\":[{\"tk\":[34,3,34,9],\"els\":[\"1:402\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[34,10,34,22],\"els\":[\"1:402\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[34,22,34,23],\"els\":[\"1:402\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[34,23,34,24],\"els\":[\"1:402\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[34,24,34,25],\"els\":[\"1:402\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[34,25,34,26],\"els\":[\"1:402\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[35,3,35,9],\"els\":[\"1:371\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[35,10,35,39],\"els\":[\"1:371\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[35,39,35,40],\"els\":[\"1:371\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[36,3,36,9],\"els\":[\"1:434\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[36,10,36,40],\"els\":[\"1:434\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[36,40,36,41],\"els\":[\"1:434\"],\"ct\":{\"0\":0,\"1\":1}}]}}}","blocks":[{"RTWName":"<Root>/Base_Thrust","SIDString":"crazyflie:11"},{"RTWName":"<Root>/Ref_Roll","SIDString":"crazyflie:12"},{"RTWName":"<Root>/Ref_Pitch","SIDString":"crazyflie:13"},{"RTWName":"<Root>/Ref_YawRate","SIDString":"crazyflie:172"},{"RTWName":"<Root>/Acc_x","SIDString":"crazyflie:5"},{"RTWName":"<Root>/Acc_y","SIDString":"crazyflie:6"},{"RTWName":"<Root>/Acc_z","SIDString":"crazyflie:7"},{"RTWName":"<Root>/Gyro_x","SIDString":"crazyflie:8"},{"RTWName":"<Root>/Gyro_y","SIDString":"crazyflie:9"},{"RTWName":"<Root>/Gyro_z","SIDString":"crazyflie:10"},{"RTWName":"<Root>/Flow_x","SIDString":"crazyflie:254"},{"RTWName":"<Root>/Flow_y","SIDString":"crazyflie:255"},{"RTWName":"<Root>/Discrete-Time\nIntegrator","SIDString":"crazyflie:371"},{"RTWName":"<Root>/Gain","SIDString":"crazyflie:369"},{"RTWName":"<Root>/Gain1","SIDString":"crazyflie:415"},{"RTWName":"<Root>/Gain2","SIDString":"crazyflie:416"},{"RTWName":"<Root>/Gain3","SIDString":"crazyflie:417"},{"RTWName":"<Root>/Gain4","SIDString":"crazyflie:418"},{"RTWName":"<Root>/Gain5","SIDString":"crazyflie:425"},{"RTWName":"<Root>/Mux","SIDString":"crazyflie:320"},{"RTWName":"<Root>/Mux1","SIDString":"crazyflie:365"},{"RTWName":"<S1>/Ref_Pitch","SIDString":"crazyflie:439"},{"RTWName":"<S1>/pitch","SIDString":"crazyflie:440"},{"RTWName":"<S1>/Discrete-Time\nIntegrator1","SIDString":"crazyflie:434"},{"RTWName":"<S1>/Gain6","SIDString":"crazyflie:435"},{"RTWName":"<S1>/Sum6","SIDString":"crazyflie:436"},{"RTWName":"<S1>/Sum7","SIDString":"crazyflie:437"},{"RTWName":"<S1>/Out1","SIDString":"crazyflie:441"},{"RTWName":"<S2>/Fx_B","SIDString":"crazyflie:356"},{"RTWName":"<S2>/Fy_B","SIDString":"crazyflie:357"},{"RTWName":"<S2>/Fz_B","SIDString":"crazyflie:358"},{"RTWName":"<S2>/In4","SIDString":"crazyflie:359"},{"RTWName":"<S2>/Delay","SIDString":"crazyflie:402"},{"RTWName":"<S2>/Demux","SIDString":"crazyflie:361"},{"RTWName":"<S2>/Discrete-Time\nIntegrator","SIDString":"crazyflie:409"},{"RTWName":"<S2>/Gain","SIDString":"crazyflie:400"},{"RTWName":"<S2>/Gain1","SIDString":"crazyflie:404"},{"RTWName":"<S2>/Gain2","SIDString":"crazyflie:405"},{"RTWName":"<S2>/Mux1","SIDString":"crazyflie:321"},{"RTWName":"<S2>/Scope","SIDString":"crazyflie:343"},{"RTWName":"<S2>/Scope1","SIDString":"crazyflie:408"},{"RTWName":"<S2>/Scope2","SIDString":"crazyflie:410"},{"RTWName":"<S3>/Fx_B","SIDString":"crazyflie:299"},{"RTWName":"<S3>/Fy_B","SIDString":"crazyflie:300"},{"RTWName":"<S3>/Fz_B","SIDString":"crazyflie:301"},{"RTWName":"<S3>/Gain","SIDString":"crazyflie:318"},{"RTWName":"<S3>/Gain1","SIDString":"crazyflie:319"},{"RTWName":"<S4>:1","SIDString":"crazyflie:296:1"},{"RTWName":"<S5>:1","SIDString":"crazyflie:297:1"},{"RTWName":"<S3>/Scope","SIDString":"crazyflie:336"},{"RTWName":"<S3>/roll","SIDString":"crazyflie:302"},{"RTWName":"<S3>/pitch","SIDString":"crazyflie:303"},{"RTWName":"<S2>/Sum","SIDString":"crazyflie:406"},{"RTWName":"<S2>/Sum1","SIDString":"crazyflie:322"},{"RTWName":"<S2>/roll","SIDString":"crazyflie:362"},{"RTWName":"<S2>/pitch","SIDString":"crazyflie:363"},{"RTWName":"<Root>/Sum","SIDString":"crazyflie:368"},{"RTWName":"<Root>/Sum1","SIDString":"crazyflie:372"},{"RTWName":"<Root>/Sum2","SIDString":"crazyflie:374"},{"RTWName":"<Root>/Sum3","SIDString":"crazyflie:375"},{"RTWName":"<Root>/Sum4","SIDString":"crazyflie:376"},{"RTWName":"<Root>/Sum5","SIDString":"crazyflie:377"},{"RTWName":"<Root>/Sum6","SIDString":"crazyflie:442"},{"RTWName":"<Root>/Terminator","SIDString":"crazyflie:447"},{"RTWName":"<Root>/ToUint16","SIDString":"crazyflie:143"},{"RTWName":"<Root>/ToUint16_1","SIDString":"crazyflie:144"},{"RTWName":"<Root>/ToUint16_2","SIDString":"crazyflie:145"},{"RTWName":"<Root>/ToUint16_3","SIDString":"crazyflie:146"},{"RTWName":"<Root>/log_Acc_x","SIDString":"crazyflie:151"},{"RTWName":"<Root>/log_Acc_y","SIDString":"crazyflie:153"},{"RTWName":"<Root>/log_Acc_z","SIDString":"crazyflie:154"},{"RTWName":"<Root>/log_Gyro_x","SIDString":"crazyflie:179"},{"RTWName":"<Root>/log_Gyro_y","SIDString":"crazyflie:180"},{"RTWName":"<Root>/log_Gyro_z","SIDString":"crazyflie:181"},{"RTWName":"<Root>/Motor_1","SIDString":"crazyflie:51"},{"RTWName":"<Root>/Motor_2","SIDString":"crazyflie:52"},{"RTWName":"<Root>/Motor_3","SIDString":"crazyflie:53"},{"RTWName":"<Root>/Motor_4","SIDString":"crazyflie:54"},{"RTWName":"<Root>/Log1","SIDString":"crazyflie:55"},{"RTWName":"<Root>/Log2","SIDString":"crazyflie:56"},{"RTWName":"<Root>/Log3","SIDString":"crazyflie:78"},{"RTWName":"<Root>/Log4","SIDString":"crazyflie:182"},{"RTWName":"<Root>/Log5","SIDString":"crazyflie:183"},{"RTWName":"<Root>/Log6","SIDString":"crazyflie:184"},{"RTWName":"<Root>/Subsystem","SIDString":"crazyflie:438"},{"RTWName":"<Root>/Subsystem1","SIDString":"crazyflie:355"},{"RTWName":"<S2>/Subsystem","SIDString":"crazyflie:298"},{"RTWName":"<S3>/MATLAB Function","SIDString":"crazyflie:296"},{"RTWName":"<S3>/MATLAB Function1","SIDString":"crazyflie:297"}],"coverage":[{"id":"SimulinkCoverage","name":"Simulink Coverage","files":[]},{"id":"Bullseye","name":"Bullseye Coverage","files":[]},{"id":"LDRA","name":"LDRA Testbed","files":[]}]};